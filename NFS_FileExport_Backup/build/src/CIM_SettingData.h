/*
**==============================================================================
**
** CAUTION: This file generated by KonkretCMPI. Please do not edit.
**
**==============================================================================
*/

#ifndef _konkrete_CIM_SettingData_h
#define _konkrete_CIM_SettingData_h

#include <konkret/konkret.h>

#include <strings.h>

/*
**==============================================================================
**
** struct CIM_SettingDataRef 
**
**==============================================================================
*/

/* classname=CIM_SettingData */
typedef struct _CIM_SettingDataRef
{
    KBase __base;
    /* CIM_ManagedElement features */
    const KString InstanceID;
    /* CIM_SettingData features */
}
CIM_SettingDataRef;

static const unsigned char __CIM_SettingDataRef_sig[] =
{
    0x0f,0x43,0x49,0x4d,0x5f,0x53,0x65,0x74,0x74,0x69,0x6e,0x67,0x44,0x61,0x74,
    0x61,0x00,0x01,0x4c,0x0a,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x44,
    0x00,
};

KINLINE void CIM_SettingDataRef_Init(
    CIM_SettingDataRef* self,
    const CMPIBroker* cb,
    const char* ns)
{
    const unsigned char* sig = __CIM_SettingDataRef_sig;
    KBase_Init(&self->__base, cb, sizeof(*self), sig, ns);
}

KINLINE CMPIStatus CIM_SettingDataRef_InitFromInstance(
    CIM_SettingDataRef* self,
    const CMPIBroker* cb,
    const CMPIInstance* x)
{
    CIM_SettingDataRef_Init(self, cb, NULL);
    return KBase_FromInstance(&self->__base, x);
}

KINLINE CMPIStatus CIM_SettingDataRef_InitFromObjectPath(
    CIM_SettingDataRef* self,
    const CMPIBroker* cb,
    const CMPIObjectPath* x)
{
    CIM_SettingDataRef_Init(self, cb, NULL);
    return KBase_FromObjectPath(&self->__base, x);
}

KINLINE void CIM_SettingDataRef_Print(
    const CIM_SettingDataRef* self,
    FILE* os)
{
    KBase_Print(os, &self->__base, 'r');
}

KINLINE CMPIInstance* CIM_SettingDataRef_ToInstance(
    const CIM_SettingDataRef* self,
    CMPIStatus* status)
{
    return KBase_ToInstance(&self->__base, status);
}

KINLINE CMPIObjectPath* CIM_SettingDataRef_ToObjectPath(
    const CIM_SettingDataRef* self,
    CMPIStatus* status)
{
    return KBase_ToObjectPath(&self->__base, status);
}

KINLINE const char* CIM_SettingDataRef_NameSpace(
    CIM_SettingDataRef* self)
{
    if (self && self->__base.magic == KMAGIC)
        return self->__base.ns ? KChars(self->__base.ns) : NULL;
    return NULL;
}

KINLINE void CIM_SettingDataRef_SetString_InstanceID(
    CIM_SettingDataRef* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_SettingDataRef_Set_InstanceID(
    CIM_SettingDataRef* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_SettingDataRef_Null_InstanceID(
    CIM_SettingDataRef* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_Null(field);
    }
}

KINLINE void CIM_SettingDataRef_Clr_InstanceID(
    CIM_SettingDataRef* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_Clr(field);
    }
}

/*
**==============================================================================
**
** struct CIM_SettingData 
**
**==============================================================================
*/

/* classname=CIM_SettingData */
typedef struct _CIM_SettingData
{
    KBase __base;
    /* CIM_ManagedElement features */
    const KString InstanceID;
    const KString Caption;
    const KString Description;
    const KString ElementName;
    const KUint64 Generation;
    /* CIM_SettingData features */
    const KString ConfigurationName;
    const KUint16 ChangeableType;
}
CIM_SettingData;

static const unsigned char __CIM_SettingData_sig[] =
{
    0x0f,0x43,0x49,0x4d,0x5f,0x53,0x65,0x74,0x74,0x69,0x6e,0x67,0x44,0x61,0x74,
    0x61,0x00,0x07,0x4c,0x0a,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x44,
    0x00,0x0c,0x07,0x43,0x61,0x70,0x74,0x69,0x6f,0x6e,0x00,0x0c,0x0b,0x44,0x65,
    0x73,0x63,0x72,0x69,0x70,0x74,0x69,0x6f,0x6e,0x00,0x0c,0x0b,0x45,0x6c,0x65,
    0x6d,0x65,0x6e,0x74,0x4e,0x61,0x6d,0x65,0x00,0x07,0x0a,0x47,0x65,0x6e,0x65,
    0x72,0x61,0x74,0x69,0x6f,0x6e,0x00,0x0c,0x11,0x43,0x6f,0x6e,0x66,0x69,0x67,
    0x75,0x72,0x61,0x74,0x69,0x6f,0x6e,0x4e,0x61,0x6d,0x65,0x00,0x03,0x0e,0x43,
    0x68,0x61,0x6e,0x67,0x65,0x61,0x62,0x6c,0x65,0x54,0x79,0x70,0x65,0x00,
};

KINLINE void CIM_SettingData_Init(
    CIM_SettingData* self,
    const CMPIBroker* cb,
    const char* ns)
{
    const unsigned char* sig = __CIM_SettingData_sig;
    KBase_Init(&self->__base, cb, sizeof(*self), sig, ns);
}

KINLINE CMPIStatus CIM_SettingData_InitFromInstance(
    CIM_SettingData* self,
    const CMPIBroker* cb,
    const CMPIInstance* x)
{
    CIM_SettingData_Init(self, cb, NULL);
    return KBase_FromInstance(&self->__base, x);
}

KINLINE CMPIStatus CIM_SettingData_InitFromObjectPath(
    CIM_SettingData* self,
    const CMPIBroker* cb,
    const CMPIObjectPath* x)
{
    CIM_SettingData_Init(self, cb, NULL);
    return KBase_FromObjectPath(&self->__base, x);
}

KINLINE void CIM_SettingData_Print(
    const CIM_SettingData* self,
    FILE* os)
{
    KBase_Print(os, &self->__base, 'i');
}

KINLINE CMPIInstance* CIM_SettingData_ToInstance(
    const CIM_SettingData* self,
    CMPIStatus* status)
{
    return KBase_ToInstance(&self->__base, status);
}

KINLINE CMPIObjectPath* CIM_SettingData_ToObjectPath(
    const CIM_SettingData* self,
    CMPIStatus* status)
{
    return KBase_ToObjectPath(&self->__base, status);
}

KINLINE const char* CIM_SettingData_NameSpace(
    CIM_SettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
        return self->__base.ns ? KChars(self->__base.ns) : NULL;
    return NULL;
}

KINLINE void CIM_SettingData_SetString_InstanceID(
    CIM_SettingData* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_SettingData_Set_InstanceID(
    CIM_SettingData* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_SettingData_Null_InstanceID(
    CIM_SettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_Null(field);
    }
}

KINLINE void CIM_SettingData_Clr_InstanceID(
    CIM_SettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_Clr(field);
    }
}

KINLINE void CIM_SettingData_SetString_Caption(
    CIM_SettingData* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Caption;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_SettingData_Set_Caption(
    CIM_SettingData* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Caption;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_SettingData_Null_Caption(
    CIM_SettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Caption;
        KString_Null(field);
    }
}

KINLINE void CIM_SettingData_Clr_Caption(
    CIM_SettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Caption;
        KString_Clr(field);
    }
}

KINLINE void CIM_SettingData_SetString_Description(
    CIM_SettingData* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Description;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_SettingData_Set_Description(
    CIM_SettingData* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Description;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_SettingData_Null_Description(
    CIM_SettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Description;
        KString_Null(field);
    }
}

KINLINE void CIM_SettingData_Clr_Description(
    CIM_SettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Description;
        KString_Clr(field);
    }
}

KINLINE void CIM_SettingData_SetString_ElementName(
    CIM_SettingData* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ElementName;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_SettingData_Set_ElementName(
    CIM_SettingData* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ElementName;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_SettingData_Null_ElementName(
    CIM_SettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ElementName;
        KString_Null(field);
    }
}

KINLINE void CIM_SettingData_Clr_ElementName(
    CIM_SettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ElementName;
        KString_Clr(field);
    }
}

KINLINE void CIM_SettingData_Set_Generation(
    CIM_SettingData* self,
    CMPIUint64 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint64* field = (KUint64*)&self->Generation;
        KUint64_Set(field, x);
    }
}

KINLINE void CIM_SettingData_Null_Generation(
    CIM_SettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint64* field = (KUint64*)&self->Generation;
        KUint64_Null(field);
    }
}

KINLINE void CIM_SettingData_Clr_Generation(
    CIM_SettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint64* field = (KUint64*)&self->Generation;
        KUint64_Clr(field);
    }
}

KINLINE void CIM_SettingData_SetString_ConfigurationName(
    CIM_SettingData* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ConfigurationName;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_SettingData_Set_ConfigurationName(
    CIM_SettingData* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ConfigurationName;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_SettingData_Null_ConfigurationName(
    CIM_SettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ConfigurationName;
        KString_Null(field);
    }
}

KINLINE void CIM_SettingData_Clr_ConfigurationName(
    CIM_SettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ConfigurationName;
        KString_Clr(field);
    }
}

KINLINE void CIM_SettingData_Set_ChangeableType(
    CIM_SettingData* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->ChangeableType;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_SettingData_Null_ChangeableType(
    CIM_SettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->ChangeableType;
        KUint16_Null(field);
    }
}

KINLINE void CIM_SettingData_Clr_ChangeableType(
    CIM_SettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->ChangeableType;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_SettingData_ChangeableType_Enum
{
    CIM_SettingData_ChangeableType_Not_Changeable___Persistent = 0,
    CIM_SettingData_ChangeableType_Changeable___Transient = 1,
    CIM_SettingData_ChangeableType_Changeable___Persistent = 2,
    CIM_SettingData_ChangeableType_Not_Changeable___Transient = 3,
}
CIM_SettingData_ChangeableType_Enum;

/* "Not Changeable - Persistent" */
#define CIM_SettingData_Set_ChangeableType_Not_Changeable___Persistent(SELF) \
    CIM_SettingData_Set_ChangeableType(SELF, 0)

/* "Changeable - Transient" */
#define CIM_SettingData_Set_ChangeableType_Changeable___Transient(SELF) \
    CIM_SettingData_Set_ChangeableType(SELF, 1)

/* "Changeable - Persistent" */
#define CIM_SettingData_Set_ChangeableType_Changeable___Persistent(SELF) \
    CIM_SettingData_Set_ChangeableType(SELF, 2)

/* "Not Changeable - Transient" */
#define CIM_SettingData_Set_ChangeableType_Not_Changeable___Transient(SELF) \
    CIM_SettingData_Set_ChangeableType(SELF, 3)

/*
**==============================================================================
**
** CIM_SettingData methods
**
**==============================================================================
*/

KINLINE CMPIStatus CIM_SettingData_DispatchMethod(
    const CMPIBroker* cb,
    CMPIMethodMI* mi,
    const CMPIContext* cc,
    const CMPIResult* cr,
    const CMPIObjectPath* cop,
    const char* meth,
    const CMPIArgs* in,
    CMPIArgs* out)
{
    CIM_SettingDataRef self;

    KReturnIf(CIM_SettingDataRef_InitFromObjectPath(&self, cb, cop));


    KReturn(ERR_METHOD_NOT_FOUND);
}

#define CIM_SettingData_ClassName "CIM_SettingData"

#endif /* _konkrete_CIM_SettingData_h */
