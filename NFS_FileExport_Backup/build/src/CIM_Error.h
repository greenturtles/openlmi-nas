/*
**==============================================================================
**
** CAUTION: This file generated by KonkretCMPI. Please do not edit.
**
**==============================================================================
*/

#ifndef _konkrete_CIM_Error_h
#define _konkrete_CIM_Error_h

#include <konkret/konkret.h>

#include <strings.h>

/*
**==============================================================================
**
** struct CIM_ErrorRef 
**
**==============================================================================
*/

/* classname=CIM_Error */
typedef struct _CIM_ErrorRef
{
    KBase __base;
    /* CIM_Message features */
    /* CIM_Error features */
}
CIM_ErrorRef;

static const unsigned char __CIM_ErrorRef_sig[] =
{
    0x09,0x43,0x49,0x4d,0x5f,0x45,0x72,0x72,0x6f,0x72,0x00,0x00,
};

KINLINE void CIM_ErrorRef_Init(
    CIM_ErrorRef* self,
    const CMPIBroker* cb,
    const char* ns)
{
    const unsigned char* sig = __CIM_ErrorRef_sig;
    KBase_Init(&self->__base, cb, sizeof(*self), sig, ns);
}

KINLINE CMPIStatus CIM_ErrorRef_InitFromInstance(
    CIM_ErrorRef* self,
    const CMPIBroker* cb,
    const CMPIInstance* x)
{
    CIM_ErrorRef_Init(self, cb, NULL);
    return KBase_FromInstance(&self->__base, x);
}

KINLINE CMPIStatus CIM_ErrorRef_InitFromObjectPath(
    CIM_ErrorRef* self,
    const CMPIBroker* cb,
    const CMPIObjectPath* x)
{
    CIM_ErrorRef_Init(self, cb, NULL);
    return KBase_FromObjectPath(&self->__base, x);
}

KINLINE void CIM_ErrorRef_Print(
    const CIM_ErrorRef* self,
    FILE* os)
{
    KBase_Print(os, &self->__base, 'r');
}

KINLINE CMPIInstance* CIM_ErrorRef_ToInstance(
    const CIM_ErrorRef* self,
    CMPIStatus* status)
{
    return KBase_ToInstance(&self->__base, status);
}

KINLINE CMPIObjectPath* CIM_ErrorRef_ToObjectPath(
    const CIM_ErrorRef* self,
    CMPIStatus* status)
{
    return KBase_ToObjectPath(&self->__base, status);
}

KINLINE const char* CIM_ErrorRef_NameSpace(
    CIM_ErrorRef* self)
{
    if (self && self->__base.magic == KMAGIC)
        return self->__base.ns ? KChars(self->__base.ns) : NULL;
    return NULL;
}

/*
**==============================================================================
**
** struct CIM_Error 
**
**==============================================================================
*/

/* classname=CIM_Error */
typedef struct _CIM_Error
{
    KBase __base;
    /* CIM_Message features */
    const KString OwningEntity;
    const KString MessageID;
    const KBoolean ContinuedInNextMessage;
    const KString Message;
    const KStringA MessageArguments;
    /* CIM_Error features */
    const KUint16 ErrorType;
    const KString OtherErrorType;
    const KUint16 PerceivedSeverity;
    const KUint16 ProbableCause;
    const KString ProbableCauseDescription;
    const KStringA RecommendedActions;
    const KString ErrorSource;
    const KUint16 ErrorSourceFormat;
    const KString OtherErrorSourceFormat;
    const KUint32 CIMStatusCode;
    const KString CIMStatusCodeDescription;
}
CIM_Error;

static const unsigned char __CIM_Error_sig[] =
{
    0x09,0x43,0x49,0x4d,0x5f,0x45,0x72,0x72,0x6f,0x72,0x00,0x10,0x0c,0x0c,0x4f,
    0x77,0x6e,0x69,0x6e,0x67,0x45,0x6e,0x74,0x69,0x74,0x79,0x00,0x0c,0x09,0x4d,
    0x65,0x73,0x73,0x61,0x67,0x65,0x49,0x44,0x00,0x00,0x16,0x43,0x6f,0x6e,0x74,
    0x69,0x6e,0x75,0x65,0x64,0x49,0x6e,0x4e,0x65,0x78,0x74,0x4d,0x65,0x73,0x73,
    0x61,0x67,0x65,0x00,0x0c,0x07,0x4d,0x65,0x73,0x73,0x61,0x67,0x65,0x00,0x8c,
    0x10,0x4d,0x65,0x73,0x73,0x61,0x67,0x65,0x41,0x72,0x67,0x75,0x6d,0x65,0x6e,
    0x74,0x73,0x00,0x03,0x09,0x45,0x72,0x72,0x6f,0x72,0x54,0x79,0x70,0x65,0x00,
    0x0c,0x0e,0x4f,0x74,0x68,0x65,0x72,0x45,0x72,0x72,0x6f,0x72,0x54,0x79,0x70,
    0x65,0x00,0x03,0x11,0x50,0x65,0x72,0x63,0x65,0x69,0x76,0x65,0x64,0x53,0x65,
    0x76,0x65,0x72,0x69,0x74,0x79,0x00,0x03,0x0d,0x50,0x72,0x6f,0x62,0x61,0x62,
    0x6c,0x65,0x43,0x61,0x75,0x73,0x65,0x00,0x0c,0x18,0x50,0x72,0x6f,0x62,0x61,
    0x62,0x6c,0x65,0x43,0x61,0x75,0x73,0x65,0x44,0x65,0x73,0x63,0x72,0x69,0x70,
    0x74,0x69,0x6f,0x6e,0x00,0x8c,0x12,0x52,0x65,0x63,0x6f,0x6d,0x6d,0x65,0x6e,
    0x64,0x65,0x64,0x41,0x63,0x74,0x69,0x6f,0x6e,0x73,0x00,0x0c,0x0b,0x45,0x72,
    0x72,0x6f,0x72,0x53,0x6f,0x75,0x72,0x63,0x65,0x00,0x03,0x11,0x45,0x72,0x72,
    0x6f,0x72,0x53,0x6f,0x75,0x72,0x63,0x65,0x46,0x6f,0x72,0x6d,0x61,0x74,0x00,
    0x0c,0x16,0x4f,0x74,0x68,0x65,0x72,0x45,0x72,0x72,0x6f,0x72,0x53,0x6f,0x75,
    0x72,0x63,0x65,0x46,0x6f,0x72,0x6d,0x61,0x74,0x00,0x05,0x0d,0x43,0x49,0x4d,
    0x53,0x74,0x61,0x74,0x75,0x73,0x43,0x6f,0x64,0x65,0x00,0x0c,0x18,0x43,0x49,
    0x4d,0x53,0x74,0x61,0x74,0x75,0x73,0x43,0x6f,0x64,0x65,0x44,0x65,0x73,0x63,
    0x72,0x69,0x70,0x74,0x69,0x6f,0x6e,0x00,
};

KINLINE void CIM_Error_Init(
    CIM_Error* self,
    const CMPIBroker* cb,
    const char* ns)
{
    const unsigned char* sig = __CIM_Error_sig;
    KBase_Init(&self->__base, cb, sizeof(*self), sig, ns);
}

KINLINE CMPIStatus CIM_Error_InitFromInstance(
    CIM_Error* self,
    const CMPIBroker* cb,
    const CMPIInstance* x)
{
    CIM_Error_Init(self, cb, NULL);
    return KBase_FromInstance(&self->__base, x);
}

KINLINE CMPIStatus CIM_Error_InitFromObjectPath(
    CIM_Error* self,
    const CMPIBroker* cb,
    const CMPIObjectPath* x)
{
    CIM_Error_Init(self, cb, NULL);
    return KBase_FromObjectPath(&self->__base, x);
}

KINLINE void CIM_Error_Print(
    const CIM_Error* self,
    FILE* os)
{
    KBase_Print(os, &self->__base, 'i');
}

KINLINE CMPIInstance* CIM_Error_ToInstance(
    const CIM_Error* self,
    CMPIStatus* status)
{
    return KBase_ToInstance(&self->__base, status);
}

KINLINE CMPIObjectPath* CIM_Error_ToObjectPath(
    const CIM_Error* self,
    CMPIStatus* status)
{
    return KBase_ToObjectPath(&self->__base, status);
}

KINLINE const char* CIM_Error_NameSpace(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
        return self->__base.ns ? KChars(self->__base.ns) : NULL;
    return NULL;
}

KINLINE void CIM_Error_SetString_OwningEntity(
    CIM_Error* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OwningEntity;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_Error_Set_OwningEntity(
    CIM_Error* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OwningEntity;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_Error_Null_OwningEntity(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OwningEntity;
        KString_Null(field);
    }
}

KINLINE void CIM_Error_Clr_OwningEntity(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OwningEntity;
        KString_Clr(field);
    }
}

KINLINE void CIM_Error_SetString_MessageID(
    CIM_Error* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->MessageID;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_Error_Set_MessageID(
    CIM_Error* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->MessageID;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_Error_Null_MessageID(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->MessageID;
        KString_Null(field);
    }
}

KINLINE void CIM_Error_Clr_MessageID(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->MessageID;
        KString_Clr(field);
    }
}

KINLINE void CIM_Error_Set_ContinuedInNextMessage(
    CIM_Error* self,
    CMPIBoolean x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KBoolean* field = (KBoolean*)&self->ContinuedInNextMessage;
        KBoolean_Set(field, x);
    }
}

KINLINE void CIM_Error_Null_ContinuedInNextMessage(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KBoolean* field = (KBoolean*)&self->ContinuedInNextMessage;
        KBoolean_Null(field);
    }
}

KINLINE void CIM_Error_Clr_ContinuedInNextMessage(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KBoolean* field = (KBoolean*)&self->ContinuedInNextMessage;
        KBoolean_Clr(field);
    }
}

KINLINE void CIM_Error_SetString_Message(
    CIM_Error* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Message;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_Error_Set_Message(
    CIM_Error* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Message;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_Error_Null_Message(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Message;
        KString_Null(field);
    }
}

KINLINE void CIM_Error_Clr_Message(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Message;
        KString_Clr(field);
    }
}

KINLINE CMPIBoolean CIM_Error_Init_MessageArguments(
    CIM_Error* self,
    CMPICount count)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->MessageArguments;
        return KStringA_Init(field, self->__base.cb, count);
    }
    return 0;
}

KINLINE void CIM_Error_InitNull_MessageArguments(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->MessageArguments;
        KStringA_InitNull(field);
    }
}

KINLINE CMPIBoolean CIM_Error_SetString_MessageArguments(
    CIM_Error* self,
    CMPICount i,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->MessageArguments;
        return KStringA_SetString(field, i, x);
    }
    return 0;
}

KINLINE CMPIBoolean CIM_Error_Set_MessageArguments(
    CIM_Error* self,
    CMPICount i,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->MessageArguments;
        return KStringA_Set(field, self->__base.cb, i, s);
    }
    return 0;
}

KINLINE KString CIM_Error_GetString_MessageArguments(
    CIM_Error* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->MessageArguments;
        return KStringA_GetString(field, i);
    }
    return KStringA_GetString(NULL, 0);
}

KINLINE const char* CIM_Error_Get_MessageArguments(
    CIM_Error* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->MessageArguments;
        return KStringA_Get(field, i);
    }
    return NULL;
}

KINLINE CMPIBoolean CIM_Error_Null_MessageArguments(
    CIM_Error* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->MessageArguments;
        return KStringA_Null(field, i);
    }
    return 0;
}

KINLINE void CIM_Error_Clr_MessageArguments(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->MessageArguments;
        KStringA_Clr(field);
    }
}

KINLINE void CIM_Error_Set_ErrorType(
    CIM_Error* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->ErrorType;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_Error_Null_ErrorType(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->ErrorType;
        KUint16_Null(field);
    }
}

KINLINE void CIM_Error_Clr_ErrorType(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->ErrorType;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_Error_ErrorType_Enum
{
    CIM_Error_ErrorType_Unknown = 0,
    CIM_Error_ErrorType_Other = 1,
    CIM_Error_ErrorType_Communications_Error = 2,
    CIM_Error_ErrorType_Quality_of_Service_Error = 3,
    CIM_Error_ErrorType_Software_Error = 4,
    CIM_Error_ErrorType_Hardware_Error = 5,
    CIM_Error_ErrorType_Environmental_Error = 6,
    CIM_Error_ErrorType_Security_Error = 7,
    CIM_Error_ErrorType_Oversubscription_Error = 8,
    CIM_Error_ErrorType_Unavailable_Resource_Error = 9,
    CIM_Error_ErrorType_Unsupported_Operation_Error = 10,
    CIM_Error_ErrorType_DMTF_Reserved = 0,
}
CIM_Error_ErrorType_Enum;

/* "Unknown" */
#define CIM_Error_Set_ErrorType_Unknown(SELF) \
    CIM_Error_Set_ErrorType(SELF, 0)

/* "Other" */
#define CIM_Error_Set_ErrorType_Other(SELF) \
    CIM_Error_Set_ErrorType(SELF, 1)

/* "Communications Error" */
#define CIM_Error_Set_ErrorType_Communications_Error(SELF) \
    CIM_Error_Set_ErrorType(SELF, 2)

/* "Quality of Service Error" */
#define CIM_Error_Set_ErrorType_Quality_of_Service_Error(SELF) \
    CIM_Error_Set_ErrorType(SELF, 3)

/* "Software Error" */
#define CIM_Error_Set_ErrorType_Software_Error(SELF) \
    CIM_Error_Set_ErrorType(SELF, 4)

/* "Hardware Error" */
#define CIM_Error_Set_ErrorType_Hardware_Error(SELF) \
    CIM_Error_Set_ErrorType(SELF, 5)

/* "Environmental Error" */
#define CIM_Error_Set_ErrorType_Environmental_Error(SELF) \
    CIM_Error_Set_ErrorType(SELF, 6)

/* "Security Error" */
#define CIM_Error_Set_ErrorType_Security_Error(SELF) \
    CIM_Error_Set_ErrorType(SELF, 7)

/* "Oversubscription Error" */
#define CIM_Error_Set_ErrorType_Oversubscription_Error(SELF) \
    CIM_Error_Set_ErrorType(SELF, 8)

/* "Unavailable Resource Error" */
#define CIM_Error_Set_ErrorType_Unavailable_Resource_Error(SELF) \
    CIM_Error_Set_ErrorType(SELF, 9)

/* "Unsupported Operation Error" */
#define CIM_Error_Set_ErrorType_Unsupported_Operation_Error(SELF) \
    CIM_Error_Set_ErrorType(SELF, 10)

/* "DMTF Reserved" */
#define CIM_Error_Set_ErrorType_DMTF_Reserved(SELF) \
    CIM_Error_Set_ErrorType(SELF, 0)

KINLINE void CIM_Error_SetString_OtherErrorType(
    CIM_Error* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OtherErrorType;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_Error_Set_OtherErrorType(
    CIM_Error* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OtherErrorType;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_Error_Null_OtherErrorType(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OtherErrorType;
        KString_Null(field);
    }
}

KINLINE void CIM_Error_Clr_OtherErrorType(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OtherErrorType;
        KString_Clr(field);
    }
}

KINLINE void CIM_Error_Set_PerceivedSeverity(
    CIM_Error* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->PerceivedSeverity;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_Error_Null_PerceivedSeverity(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->PerceivedSeverity;
        KUint16_Null(field);
    }
}

KINLINE void CIM_Error_Clr_PerceivedSeverity(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->PerceivedSeverity;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_Error_PerceivedSeverity_Enum
{
    CIM_Error_PerceivedSeverity_Unknown = 0,
    CIM_Error_PerceivedSeverity_Other = 1,
    CIM_Error_PerceivedSeverity_Information = 2,
    CIM_Error_PerceivedSeverity_Degraded_Warning = 3,
    CIM_Error_PerceivedSeverity_Minor = 4,
    CIM_Error_PerceivedSeverity_Major = 5,
    CIM_Error_PerceivedSeverity_Critical = 6,
    CIM_Error_PerceivedSeverity_Fatal_NonRecoverable = 7,
    CIM_Error_PerceivedSeverity_DMTF_Reserved = 0,
}
CIM_Error_PerceivedSeverity_Enum;

/* "Unknown" */
#define CIM_Error_Set_PerceivedSeverity_Unknown(SELF) \
    CIM_Error_Set_PerceivedSeverity(SELF, 0)

/* "Other" */
#define CIM_Error_Set_PerceivedSeverity_Other(SELF) \
    CIM_Error_Set_PerceivedSeverity(SELF, 1)

/* "Information" */
#define CIM_Error_Set_PerceivedSeverity_Information(SELF) \
    CIM_Error_Set_PerceivedSeverity(SELF, 2)

/* "Degraded/Warning" */
#define CIM_Error_Set_PerceivedSeverity_Degraded_Warning(SELF) \
    CIM_Error_Set_PerceivedSeverity(SELF, 3)

/* "Minor" */
#define CIM_Error_Set_PerceivedSeverity_Minor(SELF) \
    CIM_Error_Set_PerceivedSeverity(SELF, 4)

/* "Major" */
#define CIM_Error_Set_PerceivedSeverity_Major(SELF) \
    CIM_Error_Set_PerceivedSeverity(SELF, 5)

/* "Critical" */
#define CIM_Error_Set_PerceivedSeverity_Critical(SELF) \
    CIM_Error_Set_PerceivedSeverity(SELF, 6)

/* "Fatal/NonRecoverable" */
#define CIM_Error_Set_PerceivedSeverity_Fatal_NonRecoverable(SELF) \
    CIM_Error_Set_PerceivedSeverity(SELF, 7)

/* "DMTF Reserved" */
#define CIM_Error_Set_PerceivedSeverity_DMTF_Reserved(SELF) \
    CIM_Error_Set_PerceivedSeverity(SELF, 0)

KINLINE void CIM_Error_Set_ProbableCause(
    CIM_Error* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->ProbableCause;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_Error_Null_ProbableCause(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->ProbableCause;
        KUint16_Null(field);
    }
}

KINLINE void CIM_Error_Clr_ProbableCause(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->ProbableCause;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_Error_ProbableCause_Enum
{
    CIM_Error_ProbableCause_Unknown = 0,
    CIM_Error_ProbableCause_Other = 1,
    CIM_Error_ProbableCause_Adapter_Card_Error = 2,
    CIM_Error_ProbableCause_Application_Subsystem_Failure = 3,
    CIM_Error_ProbableCause_Bandwidth_Reduced = 4,
    CIM_Error_ProbableCause_Connection_Establishment_Error = 5,
    CIM_Error_ProbableCause_Communications_Protocol_Error = 6,
    CIM_Error_ProbableCause_Communications_Subsystem_Failure = 7,
    CIM_Error_ProbableCause_Configuration_Customization_Error = 8,
    CIM_Error_ProbableCause_Congestion = 9,
    CIM_Error_ProbableCause_Corrupt_Data = 10,
    CIM_Error_ProbableCause_CPU_Cycles_Limit_Exceeded = 11,
    CIM_Error_ProbableCause_Dataset_Modem_Error = 12,
    CIM_Error_ProbableCause_Degraded_Signal = 13,
    CIM_Error_ProbableCause_DTE_DCE_Interface_Error = 14,
    CIM_Error_ProbableCause_Enclosure_Door_Open = 15,
    CIM_Error_ProbableCause_Equipment_Malfunction = 16,
    CIM_Error_ProbableCause_Excessive_Vibration = 17,
    CIM_Error_ProbableCause_File_Format_Error = 18,
    CIM_Error_ProbableCause_Fire_Detected = 19,
    CIM_Error_ProbableCause_Flood_Detected = 20,
    CIM_Error_ProbableCause_Framing_Error = 21,
    CIM_Error_ProbableCause_HVAC_Problem = 22,
    CIM_Error_ProbableCause_Humidity_Unacceptable = 23,
    CIM_Error_ProbableCause_I_O_Device_Error = 24,
    CIM_Error_ProbableCause_Input_Device_Error = 25,
    CIM_Error_ProbableCause_LAN_Error = 26,
    CIM_Error_ProbableCause_Non_Toxic_Leak_Detected = 27,
    CIM_Error_ProbableCause_Local_Node_Transmission_Error = 28,
    CIM_Error_ProbableCause_Loss_of_Frame = 29,
    CIM_Error_ProbableCause_Loss_of_Signal = 30,
    CIM_Error_ProbableCause_Material_Supply_Exhausted = 31,
    CIM_Error_ProbableCause_Multiplexer_Problem = 32,
    CIM_Error_ProbableCause_Out_of_Memory = 33,
    CIM_Error_ProbableCause_Output_Device_Error = 34,
    CIM_Error_ProbableCause_Performance_Degraded = 35,
    CIM_Error_ProbableCause_Power_Problem = 36,
    CIM_Error_ProbableCause_Pressure_Unacceptable = 37,
    CIM_Error_ProbableCause_Processor_Problem_Internal_Machine_Error = 38,
    CIM_Error_ProbableCause_Pump_Failure = 39,
    CIM_Error_ProbableCause_Queue_Size_Exceeded = 40,
    CIM_Error_ProbableCause_Receive_Failure = 41,
    CIM_Error_ProbableCause_Receiver_Failure = 42,
    CIM_Error_ProbableCause_Remote_Node_Transmission_Error = 43,
    CIM_Error_ProbableCause_Resource_at_or_Nearing_Capacity = 44,
    CIM_Error_ProbableCause_Response_Time_Excessive = 45,
    CIM_Error_ProbableCause_Retransmission_Rate_Excessive = 46,
    CIM_Error_ProbableCause_Software_Error = 47,
    CIM_Error_ProbableCause_Software_Program_Abnormally_Terminated = 48,
    CIM_Error_ProbableCause_Software_Program_Error_Incorrect_Results = 49,
    CIM_Error_ProbableCause_Storage_Capacity_Problem = 50,
    CIM_Error_ProbableCause_Temperature_Unacceptable = 51,
    CIM_Error_ProbableCause_Threshold_Crossed = 52,
    CIM_Error_ProbableCause_Timing_Problem = 53,
    CIM_Error_ProbableCause_Toxic_Leak_Detected = 54,
    CIM_Error_ProbableCause_Transmit_Failure = 55,
    CIM_Error_ProbableCause_Transmitter_Failure = 56,
    CIM_Error_ProbableCause_Underlying_Resource_Unavailable = 57,
    CIM_Error_ProbableCause_Version_Mismatch = 58,
    CIM_Error_ProbableCause_Previous_Alert_Cleared = 59,
    CIM_Error_ProbableCause_Login_Attempts_Failed = 60,
    CIM_Error_ProbableCause_Software_Virus_Detected = 61,
    CIM_Error_ProbableCause_Hardware_Security_Breached = 62,
    CIM_Error_ProbableCause_Denial_of_Service_Detected = 63,
    CIM_Error_ProbableCause_Security_Credential_Mismatch = 64,
    CIM_Error_ProbableCause_Unauthorized_Access = 65,
    CIM_Error_ProbableCause_Alarm_Received = 66,
    CIM_Error_ProbableCause_Loss_of_Pointer = 67,
    CIM_Error_ProbableCause_Payload_Mismatch = 68,
    CIM_Error_ProbableCause_Transmission_Error = 69,
    CIM_Error_ProbableCause_Excessive_Error_Rate = 70,
    CIM_Error_ProbableCause_Trace_Problem = 71,
    CIM_Error_ProbableCause_Element_Unavailable = 72,
    CIM_Error_ProbableCause_Element_Missing = 73,
    CIM_Error_ProbableCause_Loss_of_Multi_Frame = 74,
    CIM_Error_ProbableCause_Broadcast_Channel_Failure = 75,
    CIM_Error_ProbableCause_Invalid_Message_Received = 76,
    CIM_Error_ProbableCause_Routing_Failure = 77,
    CIM_Error_ProbableCause_Backplane_Failure = 78,
    CIM_Error_ProbableCause_Identifier_Duplication = 79,
    CIM_Error_ProbableCause_Protection_Path_Failure = 80,
    CIM_Error_ProbableCause_Sync_Loss_or_Mismatch = 81,
    CIM_Error_ProbableCause_Terminal_Problem = 82,
    CIM_Error_ProbableCause_Real_Time_Clock_Failure = 83,
    CIM_Error_ProbableCause_Antenna_Failure = 84,
    CIM_Error_ProbableCause_Battery_Charging_Failure = 85,
    CIM_Error_ProbableCause_Disk_Failure = 86,
    CIM_Error_ProbableCause_Frequency_Hopping_Failure = 87,
    CIM_Error_ProbableCause_Loss_of_Redundancy = 88,
    CIM_Error_ProbableCause_Power_Supply_Failure = 89,
    CIM_Error_ProbableCause_Signal_Quality_Problem = 90,
    CIM_Error_ProbableCause_Battery_Discharging = 91,
    CIM_Error_ProbableCause_Battery_Failure = 92,
    CIM_Error_ProbableCause_Commercial_Power_Problem = 93,
    CIM_Error_ProbableCause_Fan_Failure = 94,
    CIM_Error_ProbableCause_Engine_Failure = 95,
    CIM_Error_ProbableCause_Sensor_Failure = 96,
    CIM_Error_ProbableCause_Fuse_Failure = 97,
    CIM_Error_ProbableCause_Generator_Failure = 98,
    CIM_Error_ProbableCause_Low_Battery = 99,
    CIM_Error_ProbableCause_Low_Fuel = 100,
    CIM_Error_ProbableCause_Low_Water = 101,
    CIM_Error_ProbableCause_Explosive_Gas = 102,
    CIM_Error_ProbableCause_High_Winds = 103,
    CIM_Error_ProbableCause_Ice_Buildup = 104,
    CIM_Error_ProbableCause_Smoke = 105,
    CIM_Error_ProbableCause_Memory_Mismatch = 106,
    CIM_Error_ProbableCause_Out_of_CPU_Cycles = 107,
    CIM_Error_ProbableCause_Software_Environment_Problem = 108,
    CIM_Error_ProbableCause_Software_Download_Failure = 109,
    CIM_Error_ProbableCause_Element_Reinitialized = 110,
    CIM_Error_ProbableCause_Timeout = 111,
    CIM_Error_ProbableCause_Logging_Problems = 112,
    CIM_Error_ProbableCause_Leak_Detected = 113,
    CIM_Error_ProbableCause_Protection_Mechanism_Failure = 114,
    CIM_Error_ProbableCause_Protecting_Resource_Failure = 115,
    CIM_Error_ProbableCause_Database_Inconsistency = 116,
    CIM_Error_ProbableCause_Authentication_Failure = 117,
    CIM_Error_ProbableCause_Breach_of_Confidentiality = 118,
    CIM_Error_ProbableCause_Cable_Tamper = 119,
    CIM_Error_ProbableCause_Delayed_Information = 120,
    CIM_Error_ProbableCause_Duplicate_Information = 121,
    CIM_Error_ProbableCause_Information_Missing = 122,
    CIM_Error_ProbableCause_Information_Modification = 123,
    CIM_Error_ProbableCause_Information_Out_of_Sequence = 124,
    CIM_Error_ProbableCause_Key_Expired = 125,
    CIM_Error_ProbableCause_Non_Repudiation_Failure = 126,
    CIM_Error_ProbableCause_Out_of_Hours_Activity = 127,
    CIM_Error_ProbableCause_Out_of_Service = 128,
    CIM_Error_ProbableCause_Procedural_Error = 129,
    CIM_Error_ProbableCause_Unexpected_Information = 130,
    CIM_Error_ProbableCause_DMTF_Reserved = 0,
}
CIM_Error_ProbableCause_Enum;

/* "Unknown" */
#define CIM_Error_Set_ProbableCause_Unknown(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 0)

/* "Other" */
#define CIM_Error_Set_ProbableCause_Other(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 1)

/* "Adapter/Card Error" */
#define CIM_Error_Set_ProbableCause_Adapter_Card_Error(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 2)

/* "Application Subsystem Failure" */
#define CIM_Error_Set_ProbableCause_Application_Subsystem_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 3)

/* "Bandwidth Reduced" */
#define CIM_Error_Set_ProbableCause_Bandwidth_Reduced(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 4)

/* "Connection Establishment Error" */
#define CIM_Error_Set_ProbableCause_Connection_Establishment_Error(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 5)

/* "Communications Protocol Error" */
#define CIM_Error_Set_ProbableCause_Communications_Protocol_Error(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 6)

/* "Communications Subsystem Failure" */
#define CIM_Error_Set_ProbableCause_Communications_Subsystem_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 7)

/* "Configuration/Customization Error" */
#define CIM_Error_Set_ProbableCause_Configuration_Customization_Error(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 8)

/* "Congestion" */
#define CIM_Error_Set_ProbableCause_Congestion(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 9)

/* "Corrupt Data" */
#define CIM_Error_Set_ProbableCause_Corrupt_Data(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 10)

/* "CPU Cycles Limit Exceeded" */
#define CIM_Error_Set_ProbableCause_CPU_Cycles_Limit_Exceeded(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 11)

/* "Dataset/Modem Error" */
#define CIM_Error_Set_ProbableCause_Dataset_Modem_Error(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 12)

/* "Degraded Signal" */
#define CIM_Error_Set_ProbableCause_Degraded_Signal(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 13)

/* "DTE-DCE Interface Error" */
#define CIM_Error_Set_ProbableCause_DTE_DCE_Interface_Error(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 14)

/* "Enclosure Door Open" */
#define CIM_Error_Set_ProbableCause_Enclosure_Door_Open(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 15)

/* "Equipment Malfunction" */
#define CIM_Error_Set_ProbableCause_Equipment_Malfunction(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 16)

/* "Excessive Vibration" */
#define CIM_Error_Set_ProbableCause_Excessive_Vibration(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 17)

/* "File Format Error" */
#define CIM_Error_Set_ProbableCause_File_Format_Error(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 18)

/* "Fire Detected" */
#define CIM_Error_Set_ProbableCause_Fire_Detected(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 19)

/* "Flood Detected" */
#define CIM_Error_Set_ProbableCause_Flood_Detected(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 20)

/* "Framing Error" */
#define CIM_Error_Set_ProbableCause_Framing_Error(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 21)

/* "HVAC Problem" */
#define CIM_Error_Set_ProbableCause_HVAC_Problem(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 22)

/* "Humidity Unacceptable" */
#define CIM_Error_Set_ProbableCause_Humidity_Unacceptable(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 23)

/* "I/O Device Error" */
#define CIM_Error_Set_ProbableCause_I_O_Device_Error(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 24)

/* "Input Device Error" */
#define CIM_Error_Set_ProbableCause_Input_Device_Error(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 25)

/* "LAN Error" */
#define CIM_Error_Set_ProbableCause_LAN_Error(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 26)

/* "Non-Toxic Leak Detected" */
#define CIM_Error_Set_ProbableCause_Non_Toxic_Leak_Detected(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 27)

/* "Local Node Transmission Error" */
#define CIM_Error_Set_ProbableCause_Local_Node_Transmission_Error(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 28)

/* "Loss of Frame" */
#define CIM_Error_Set_ProbableCause_Loss_of_Frame(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 29)

/* "Loss of Signal" */
#define CIM_Error_Set_ProbableCause_Loss_of_Signal(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 30)

/* "Material Supply Exhausted" */
#define CIM_Error_Set_ProbableCause_Material_Supply_Exhausted(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 31)

/* "Multiplexer Problem" */
#define CIM_Error_Set_ProbableCause_Multiplexer_Problem(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 32)

/* "Out of Memory" */
#define CIM_Error_Set_ProbableCause_Out_of_Memory(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 33)

/* "Output Device Error" */
#define CIM_Error_Set_ProbableCause_Output_Device_Error(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 34)

/* "Performance Degraded" */
#define CIM_Error_Set_ProbableCause_Performance_Degraded(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 35)

/* "Power Problem" */
#define CIM_Error_Set_ProbableCause_Power_Problem(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 36)

/* "Pressure Unacceptable" */
#define CIM_Error_Set_ProbableCause_Pressure_Unacceptable(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 37)

/* "Processor Problem (Internal Machine Error)" */
#define CIM_Error_Set_ProbableCause_Processor_Problem_Internal_Machine_Error(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 38)

/* "Pump Failure" */
#define CIM_Error_Set_ProbableCause_Pump_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 39)

/* "Queue Size Exceeded" */
#define CIM_Error_Set_ProbableCause_Queue_Size_Exceeded(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 40)

/* "Receive Failure" */
#define CIM_Error_Set_ProbableCause_Receive_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 41)

/* "Receiver Failure" */
#define CIM_Error_Set_ProbableCause_Receiver_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 42)

/* "Remote Node Transmission Error" */
#define CIM_Error_Set_ProbableCause_Remote_Node_Transmission_Error(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 43)

/* "Resource at or Nearing Capacity" */
#define CIM_Error_Set_ProbableCause_Resource_at_or_Nearing_Capacity(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 44)

/* "Response Time Excessive" */
#define CIM_Error_Set_ProbableCause_Response_Time_Excessive(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 45)

/* "Retransmission Rate Excessive" */
#define CIM_Error_Set_ProbableCause_Retransmission_Rate_Excessive(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 46)

/* "Software Error" */
#define CIM_Error_Set_ProbableCause_Software_Error(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 47)

/* "Software Program Abnormally Terminated" */
#define CIM_Error_Set_ProbableCause_Software_Program_Abnormally_Terminated(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 48)

/* "Software Program Error (Incorrect Results)" */
#define CIM_Error_Set_ProbableCause_Software_Program_Error_Incorrect_Results(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 49)

/* "Storage Capacity Problem" */
#define CIM_Error_Set_ProbableCause_Storage_Capacity_Problem(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 50)

/* "Temperature Unacceptable" */
#define CIM_Error_Set_ProbableCause_Temperature_Unacceptable(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 51)

/* "Threshold Crossed" */
#define CIM_Error_Set_ProbableCause_Threshold_Crossed(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 52)

/* "Timing Problem" */
#define CIM_Error_Set_ProbableCause_Timing_Problem(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 53)

/* "Toxic Leak Detected" */
#define CIM_Error_Set_ProbableCause_Toxic_Leak_Detected(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 54)

/* "Transmit Failure" */
#define CIM_Error_Set_ProbableCause_Transmit_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 55)

/* "Transmitter Failure" */
#define CIM_Error_Set_ProbableCause_Transmitter_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 56)

/* "Underlying Resource Unavailable" */
#define CIM_Error_Set_ProbableCause_Underlying_Resource_Unavailable(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 57)

/* "Version Mismatch" */
#define CIM_Error_Set_ProbableCause_Version_Mismatch(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 58)

/* "Previous Alert Cleared" */
#define CIM_Error_Set_ProbableCause_Previous_Alert_Cleared(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 59)

/* "Login Attempts Failed" */
#define CIM_Error_Set_ProbableCause_Login_Attempts_Failed(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 60)

/* "Software Virus Detected" */
#define CIM_Error_Set_ProbableCause_Software_Virus_Detected(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 61)

/* "Hardware Security Breached" */
#define CIM_Error_Set_ProbableCause_Hardware_Security_Breached(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 62)

/* "Denial of Service Detected" */
#define CIM_Error_Set_ProbableCause_Denial_of_Service_Detected(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 63)

/* "Security Credential Mismatch" */
#define CIM_Error_Set_ProbableCause_Security_Credential_Mismatch(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 64)

/* "Unauthorized Access" */
#define CIM_Error_Set_ProbableCause_Unauthorized_Access(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 65)

/* "Alarm Received" */
#define CIM_Error_Set_ProbableCause_Alarm_Received(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 66)

/* "Loss of Pointer" */
#define CIM_Error_Set_ProbableCause_Loss_of_Pointer(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 67)

/* "Payload Mismatch" */
#define CIM_Error_Set_ProbableCause_Payload_Mismatch(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 68)

/* "Transmission Error" */
#define CIM_Error_Set_ProbableCause_Transmission_Error(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 69)

/* "Excessive Error Rate" */
#define CIM_Error_Set_ProbableCause_Excessive_Error_Rate(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 70)

/* "Trace Problem" */
#define CIM_Error_Set_ProbableCause_Trace_Problem(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 71)

/* "Element Unavailable" */
#define CIM_Error_Set_ProbableCause_Element_Unavailable(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 72)

/* "Element Missing" */
#define CIM_Error_Set_ProbableCause_Element_Missing(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 73)

/* "Loss of Multi Frame" */
#define CIM_Error_Set_ProbableCause_Loss_of_Multi_Frame(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 74)

/* "Broadcast Channel Failure" */
#define CIM_Error_Set_ProbableCause_Broadcast_Channel_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 75)

/* "Invalid Message Received" */
#define CIM_Error_Set_ProbableCause_Invalid_Message_Received(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 76)

/* "Routing Failure" */
#define CIM_Error_Set_ProbableCause_Routing_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 77)

/* "Backplane Failure" */
#define CIM_Error_Set_ProbableCause_Backplane_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 78)

/* "Identifier Duplication" */
#define CIM_Error_Set_ProbableCause_Identifier_Duplication(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 79)

/* "Protection Path Failure" */
#define CIM_Error_Set_ProbableCause_Protection_Path_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 80)

/* "Sync Loss or Mismatch" */
#define CIM_Error_Set_ProbableCause_Sync_Loss_or_Mismatch(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 81)

/* "Terminal Problem" */
#define CIM_Error_Set_ProbableCause_Terminal_Problem(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 82)

/* "Real Time Clock Failure" */
#define CIM_Error_Set_ProbableCause_Real_Time_Clock_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 83)

/* "Antenna Failure" */
#define CIM_Error_Set_ProbableCause_Antenna_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 84)

/* "Battery Charging Failure" */
#define CIM_Error_Set_ProbableCause_Battery_Charging_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 85)

/* "Disk Failure" */
#define CIM_Error_Set_ProbableCause_Disk_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 86)

/* "Frequency Hopping Failure" */
#define CIM_Error_Set_ProbableCause_Frequency_Hopping_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 87)

/* "Loss of Redundancy" */
#define CIM_Error_Set_ProbableCause_Loss_of_Redundancy(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 88)

/* "Power Supply Failure" */
#define CIM_Error_Set_ProbableCause_Power_Supply_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 89)

/* "Signal Quality Problem" */
#define CIM_Error_Set_ProbableCause_Signal_Quality_Problem(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 90)

/* "Battery Discharging" */
#define CIM_Error_Set_ProbableCause_Battery_Discharging(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 91)

/* "Battery Failure" */
#define CIM_Error_Set_ProbableCause_Battery_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 92)

/* "Commercial Power Problem" */
#define CIM_Error_Set_ProbableCause_Commercial_Power_Problem(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 93)

/* "Fan Failure" */
#define CIM_Error_Set_ProbableCause_Fan_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 94)

/* "Engine Failure" */
#define CIM_Error_Set_ProbableCause_Engine_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 95)

/* "Sensor Failure" */
#define CIM_Error_Set_ProbableCause_Sensor_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 96)

/* "Fuse Failure" */
#define CIM_Error_Set_ProbableCause_Fuse_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 97)

/* "Generator Failure" */
#define CIM_Error_Set_ProbableCause_Generator_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 98)

/* "Low Battery" */
#define CIM_Error_Set_ProbableCause_Low_Battery(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 99)

/* "Low Fuel" */
#define CIM_Error_Set_ProbableCause_Low_Fuel(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 100)

/* "Low Water" */
#define CIM_Error_Set_ProbableCause_Low_Water(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 101)

/* "Explosive Gas" */
#define CIM_Error_Set_ProbableCause_Explosive_Gas(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 102)

/* "High Winds" */
#define CIM_Error_Set_ProbableCause_High_Winds(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 103)

/* "Ice Buildup" */
#define CIM_Error_Set_ProbableCause_Ice_Buildup(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 104)

/* "Smoke" */
#define CIM_Error_Set_ProbableCause_Smoke(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 105)

/* "Memory Mismatch" */
#define CIM_Error_Set_ProbableCause_Memory_Mismatch(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 106)

/* "Out of CPU Cycles" */
#define CIM_Error_Set_ProbableCause_Out_of_CPU_Cycles(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 107)

/* "Software Environment Problem" */
#define CIM_Error_Set_ProbableCause_Software_Environment_Problem(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 108)

/* "Software Download Failure" */
#define CIM_Error_Set_ProbableCause_Software_Download_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 109)

/* "Element Reinitialized" */
#define CIM_Error_Set_ProbableCause_Element_Reinitialized(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 110)

/* "Timeout" */
#define CIM_Error_Set_ProbableCause_Timeout(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 111)

/* "Logging Problems" */
#define CIM_Error_Set_ProbableCause_Logging_Problems(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 112)

/* "Leak Detected" */
#define CIM_Error_Set_ProbableCause_Leak_Detected(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 113)

/* "Protection Mechanism Failure" */
#define CIM_Error_Set_ProbableCause_Protection_Mechanism_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 114)

/* "Protecting Resource Failure" */
#define CIM_Error_Set_ProbableCause_Protecting_Resource_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 115)

/* "Database Inconsistency" */
#define CIM_Error_Set_ProbableCause_Database_Inconsistency(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 116)

/* "Authentication Failure" */
#define CIM_Error_Set_ProbableCause_Authentication_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 117)

/* "Breach of Confidentiality" */
#define CIM_Error_Set_ProbableCause_Breach_of_Confidentiality(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 118)

/* "Cable Tamper" */
#define CIM_Error_Set_ProbableCause_Cable_Tamper(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 119)

/* "Delayed Information" */
#define CIM_Error_Set_ProbableCause_Delayed_Information(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 120)

/* "Duplicate Information" */
#define CIM_Error_Set_ProbableCause_Duplicate_Information(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 121)

/* "Information Missing" */
#define CIM_Error_Set_ProbableCause_Information_Missing(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 122)

/* "Information Modification" */
#define CIM_Error_Set_ProbableCause_Information_Modification(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 123)

/* "Information Out of Sequence" */
#define CIM_Error_Set_ProbableCause_Information_Out_of_Sequence(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 124)

/* "Key Expired" */
#define CIM_Error_Set_ProbableCause_Key_Expired(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 125)

/* "Non-Repudiation Failure" */
#define CIM_Error_Set_ProbableCause_Non_Repudiation_Failure(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 126)

/* "Out of Hours Activity" */
#define CIM_Error_Set_ProbableCause_Out_of_Hours_Activity(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 127)

/* "Out of Service" */
#define CIM_Error_Set_ProbableCause_Out_of_Service(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 128)

/* "Procedural Error" */
#define CIM_Error_Set_ProbableCause_Procedural_Error(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 129)

/* "Unexpected Information" */
#define CIM_Error_Set_ProbableCause_Unexpected_Information(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 130)

/* "DMTF Reserved" */
#define CIM_Error_Set_ProbableCause_DMTF_Reserved(SELF) \
    CIM_Error_Set_ProbableCause(SELF, 0)

KINLINE void CIM_Error_SetString_ProbableCauseDescription(
    CIM_Error* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ProbableCauseDescription;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_Error_Set_ProbableCauseDescription(
    CIM_Error* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ProbableCauseDescription;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_Error_Null_ProbableCauseDescription(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ProbableCauseDescription;
        KString_Null(field);
    }
}

KINLINE void CIM_Error_Clr_ProbableCauseDescription(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ProbableCauseDescription;
        KString_Clr(field);
    }
}

KINLINE CMPIBoolean CIM_Error_Init_RecommendedActions(
    CIM_Error* self,
    CMPICount count)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->RecommendedActions;
        return KStringA_Init(field, self->__base.cb, count);
    }
    return 0;
}

KINLINE void CIM_Error_InitNull_RecommendedActions(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->RecommendedActions;
        KStringA_InitNull(field);
    }
}

KINLINE CMPIBoolean CIM_Error_SetString_RecommendedActions(
    CIM_Error* self,
    CMPICount i,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->RecommendedActions;
        return KStringA_SetString(field, i, x);
    }
    return 0;
}

KINLINE CMPIBoolean CIM_Error_Set_RecommendedActions(
    CIM_Error* self,
    CMPICount i,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->RecommendedActions;
        return KStringA_Set(field, self->__base.cb, i, s);
    }
    return 0;
}

KINLINE KString CIM_Error_GetString_RecommendedActions(
    CIM_Error* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->RecommendedActions;
        return KStringA_GetString(field, i);
    }
    return KStringA_GetString(NULL, 0);
}

KINLINE const char* CIM_Error_Get_RecommendedActions(
    CIM_Error* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->RecommendedActions;
        return KStringA_Get(field, i);
    }
    return NULL;
}

KINLINE CMPIBoolean CIM_Error_Null_RecommendedActions(
    CIM_Error* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->RecommendedActions;
        return KStringA_Null(field, i);
    }
    return 0;
}

KINLINE void CIM_Error_Clr_RecommendedActions(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->RecommendedActions;
        KStringA_Clr(field);
    }
}

KINLINE void CIM_Error_SetString_ErrorSource(
    CIM_Error* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ErrorSource;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_Error_Set_ErrorSource(
    CIM_Error* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ErrorSource;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_Error_Null_ErrorSource(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ErrorSource;
        KString_Null(field);
    }
}

KINLINE void CIM_Error_Clr_ErrorSource(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ErrorSource;
        KString_Clr(field);
    }
}

KINLINE void CIM_Error_Set_ErrorSourceFormat(
    CIM_Error* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->ErrorSourceFormat;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_Error_Null_ErrorSourceFormat(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->ErrorSourceFormat;
        KUint16_Null(field);
    }
}

KINLINE void CIM_Error_Clr_ErrorSourceFormat(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->ErrorSourceFormat;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_Error_ErrorSourceFormat_Enum
{
    CIM_Error_ErrorSourceFormat_Unknown = 0,
    CIM_Error_ErrorSourceFormat_Other = 1,
    CIM_Error_ErrorSourceFormat_CIMObjectPath = 2,
    CIM_Error_ErrorSourceFormat_DMTF_Reserved = 0,
}
CIM_Error_ErrorSourceFormat_Enum;

/* "Unknown" */
#define CIM_Error_Set_ErrorSourceFormat_Unknown(SELF) \
    CIM_Error_Set_ErrorSourceFormat(SELF, 0)

/* "Other" */
#define CIM_Error_Set_ErrorSourceFormat_Other(SELF) \
    CIM_Error_Set_ErrorSourceFormat(SELF, 1)

/* "CIMObjectPath" */
#define CIM_Error_Set_ErrorSourceFormat_CIMObjectPath(SELF) \
    CIM_Error_Set_ErrorSourceFormat(SELF, 2)

/* "DMTF Reserved" */
#define CIM_Error_Set_ErrorSourceFormat_DMTF_Reserved(SELF) \
    CIM_Error_Set_ErrorSourceFormat(SELF, 0)

KINLINE void CIM_Error_SetString_OtherErrorSourceFormat(
    CIM_Error* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OtherErrorSourceFormat;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_Error_Set_OtherErrorSourceFormat(
    CIM_Error* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OtherErrorSourceFormat;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_Error_Null_OtherErrorSourceFormat(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OtherErrorSourceFormat;
        KString_Null(field);
    }
}

KINLINE void CIM_Error_Clr_OtherErrorSourceFormat(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OtherErrorSourceFormat;
        KString_Clr(field);
    }
}

KINLINE void CIM_Error_Set_CIMStatusCode(
    CIM_Error* self,
    CMPIUint32 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint32* field = (KUint32*)&self->CIMStatusCode;
        KUint32_Set(field, x);
    }
}

KINLINE void CIM_Error_Null_CIMStatusCode(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint32* field = (KUint32*)&self->CIMStatusCode;
        KUint32_Null(field);
    }
}

KINLINE void CIM_Error_Clr_CIMStatusCode(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint32* field = (KUint32*)&self->CIMStatusCode;
        KUint32_Clr(field);
    }
}

typedef enum _CIM_Error_CIMStatusCode_Enum
{
    CIM_Error_CIMStatusCode_CIM_ERR_FAILED = 1,
    CIM_Error_CIMStatusCode_CIM_ERR_ACCESS_DENIED = 2,
    CIM_Error_CIMStatusCode_CIM_ERR_INVALID_NAMESPACE = 3,
    CIM_Error_CIMStatusCode_CIM_ERR_INVALID_PARAMETER = 4,
    CIM_Error_CIMStatusCode_CIM_ERR_INVALID_CLASS = 5,
    CIM_Error_CIMStatusCode_CIM_ERR_NOT_FOUND = 6,
    CIM_Error_CIMStatusCode_CIM_ERR_NOT_SUPPORTED = 7,
    CIM_Error_CIMStatusCode_CIM_ERR_CLASS_HAS_CHILDREN = 8,
    CIM_Error_CIMStatusCode_CIM_ERR_CLASS_HAS_INSTANCES = 9,
    CIM_Error_CIMStatusCode_CIM_ERR_INVALID_SUPERCLASS = 10,
    CIM_Error_CIMStatusCode_CIM_ERR_ALREADY_EXISTS = 11,
    CIM_Error_CIMStatusCode_CIM_ERR_NO_SUCH_PROPERTY = 12,
    CIM_Error_CIMStatusCode_CIM_ERR_TYPE_MISMATCH = 13,
    CIM_Error_CIMStatusCode_CIM_ERR_QUERY_LANGUAGE_NOT_SUPPORTED = 14,
    CIM_Error_CIMStatusCode_CIM_ERR_INVALID_QUERY = 15,
    CIM_Error_CIMStatusCode_CIM_ERR_METHOD_NOT_AVAILABLE = 16,
    CIM_Error_CIMStatusCode_CIM_ERR_METHOD_NOT_FOUND = 17,
    CIM_Error_CIMStatusCode_CIM_ERR_UNEXPECTED_RESPONSE = 18,
    CIM_Error_CIMStatusCode_CIM_ERR_INVALID_RESPONSE_DESTINATION = 19,
    CIM_Error_CIMStatusCode_CIM_ERR_NAMESPACE_NOT_EMPTY = 20,
    CIM_Error_CIMStatusCode_CIM_ERR_INVALID_ENUMERATION_CONTEXT = 21,
    CIM_Error_CIMStatusCode_CIM_ERR_INVALID_OPERATION_TIMEOUT = 22,
    CIM_Error_CIMStatusCode_CIM_ERR_PULL_HAS_BEEN_ABANDONED = 23,
    CIM_Error_CIMStatusCode_CIM_ERR_PULL_CANNOT_BE_ABANDONED = 24,
    CIM_Error_CIMStatusCode_CIM_ERR_FILTERED_ENUMERATION_NOT_SUPPORTED = 25,
    CIM_Error_CIMStatusCode_CIM_ERR_CONTINUATION_ON_ERROR_NOT_SUPPORTED = 26,
    CIM_Error_CIMStatusCode_CIM_ERR_SERVER_LIMITS_EXCEEDED = 27,
    CIM_Error_CIMStatusCode_CIM_ERR_SERVER_IS_SHUTTING_DOWN = 28,
    CIM_Error_CIMStatusCode_CIM_ERR_QUERY_FEATURE_NOT_SUPPORTED = 29,
    CIM_Error_CIMStatusCode_DMTF_Reserved = 0,
}
CIM_Error_CIMStatusCode_Enum;

/* "CIM_ERR_FAILED" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_FAILED(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 1)

/* "CIM_ERR_ACCESS_DENIED" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_ACCESS_DENIED(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 2)

/* "CIM_ERR_INVALID_NAMESPACE" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_INVALID_NAMESPACE(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 3)

/* "CIM_ERR_INVALID_PARAMETER" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_INVALID_PARAMETER(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 4)

/* "CIM_ERR_INVALID_CLASS" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_INVALID_CLASS(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 5)

/* "CIM_ERR_NOT_FOUND" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_NOT_FOUND(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 6)

/* "CIM_ERR_NOT_SUPPORTED" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_NOT_SUPPORTED(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 7)

/* "CIM_ERR_CLASS_HAS_CHILDREN" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_CLASS_HAS_CHILDREN(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 8)

/* "CIM_ERR_CLASS_HAS_INSTANCES" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_CLASS_HAS_INSTANCES(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 9)

/* "CIM_ERR_INVALID_SUPERCLASS" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_INVALID_SUPERCLASS(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 10)

/* "CIM_ERR_ALREADY_EXISTS" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_ALREADY_EXISTS(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 11)

/* "CIM_ERR_NO_SUCH_PROPERTY" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_NO_SUCH_PROPERTY(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 12)

/* "CIM_ERR_TYPE_MISMATCH" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_TYPE_MISMATCH(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 13)

/* "CIM_ERR_QUERY_LANGUAGE_NOT_SUPPORTED" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_QUERY_LANGUAGE_NOT_SUPPORTED(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 14)

/* "CIM_ERR_INVALID_QUERY" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_INVALID_QUERY(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 15)

/* "CIM_ERR_METHOD_NOT_AVAILABLE" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_METHOD_NOT_AVAILABLE(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 16)

/* "CIM_ERR_METHOD_NOT_FOUND" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_METHOD_NOT_FOUND(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 17)

/* "CIM_ERR_UNEXPECTED_RESPONSE" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_UNEXPECTED_RESPONSE(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 18)

/* "CIM_ERR_INVALID_RESPONSE_DESTINATION" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_INVALID_RESPONSE_DESTINATION(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 19)

/* "CIM_ERR_NAMESPACE_NOT_EMPTY" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_NAMESPACE_NOT_EMPTY(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 20)

/* "CIM_ERR_INVALID_ENUMERATION_CONTEXT" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_INVALID_ENUMERATION_CONTEXT(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 21)

/* "CIM_ERR_INVALID_OPERATION_TIMEOUT" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_INVALID_OPERATION_TIMEOUT(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 22)

/* "CIM_ERR_PULL_HAS_BEEN_ABANDONED" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_PULL_HAS_BEEN_ABANDONED(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 23)

/* "CIM_ERR_PULL_CANNOT_BE_ABANDONED" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_PULL_CANNOT_BE_ABANDONED(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 24)

/* "CIM_ERR_FILTERED_ENUMERATION_NOT_SUPPORTED" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_FILTERED_ENUMERATION_NOT_SUPPORTED(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 25)

/* "CIM_ERR_CONTINUATION_ON_ERROR_NOT_SUPPORTED" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_CONTINUATION_ON_ERROR_NOT_SUPPORTED(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 26)

/* "CIM_ERR_SERVER_LIMITS_EXCEEDED" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_SERVER_LIMITS_EXCEEDED(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 27)

/* "CIM_ERR_SERVER_IS_SHUTTING_DOWN" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_SERVER_IS_SHUTTING_DOWN(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 28)

/* "CIM_ERR_QUERY_FEATURE_NOT_SUPPORTED" */
#define CIM_Error_Set_CIMStatusCode_CIM_ERR_QUERY_FEATURE_NOT_SUPPORTED(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 29)

/* "DMTF Reserved" */
#define CIM_Error_Set_CIMStatusCode_DMTF_Reserved(SELF) \
    CIM_Error_Set_CIMStatusCode(SELF, 0)

KINLINE void CIM_Error_SetString_CIMStatusCodeDescription(
    CIM_Error* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->CIMStatusCodeDescription;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_Error_Set_CIMStatusCodeDescription(
    CIM_Error* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->CIMStatusCodeDescription;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_Error_Null_CIMStatusCodeDescription(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->CIMStatusCodeDescription;
        KString_Null(field);
    }
}

KINLINE void CIM_Error_Clr_CIMStatusCodeDescription(
    CIM_Error* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->CIMStatusCodeDescription;
        KString_Clr(field);
    }
}

/*
**==============================================================================
**
** CIM_Error methods
**
**==============================================================================
*/

KINLINE CMPIStatus CIM_Error_DispatchMethod(
    const CMPIBroker* cb,
    CMPIMethodMI* mi,
    const CMPIContext* cc,
    const CMPIResult* cr,
    const CMPIObjectPath* cop,
    const char* meth,
    const CMPIArgs* in,
    CMPIArgs* out)
{
    CIM_ErrorRef self;

    KReturnIf(CIM_ErrorRef_InitFromObjectPath(&self, cb, cop));


    KReturn(ERR_METHOD_NOT_FOUND);
}

#define CIM_Error_ClassName "CIM_Error"

#endif /* _konkrete_CIM_Error_h */
