/*
**==============================================================================
**
** CAUTION: This file generated by KonkretCMPI. Please do not edit.
**
**==============================================================================
*/

#ifndef _konkrete_CIM_ConcreteJob_h
#define _konkrete_CIM_ConcreteJob_h

#include <konkret/konkret.h>

#include <strings.h>

/*
**==============================================================================
**
** struct CIM_ConcreteJobRef 
**
**==============================================================================
*/

/* classname=CIM_ConcreteJob */
typedef struct _CIM_ConcreteJobRef
{
    KBase __base;
    /* CIM_ManagedElement features */
    const KString InstanceID;
    /* CIM_ManagedSystemElement features */
    /* CIM_LogicalElement features */
    /* CIM_Job features */
    /* CIM_ConcreteJob features */
}
CIM_ConcreteJobRef;

static const unsigned char __CIM_ConcreteJobRef_sig[] =
{
    0x0f,0x43,0x49,0x4d,0x5f,0x43,0x6f,0x6e,0x63,0x72,0x65,0x74,0x65,0x4a,0x6f,
    0x62,0x00,0x01,0x4c,0x0a,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x44,
    0x00,
};

KINLINE void CIM_ConcreteJobRef_Init(
    CIM_ConcreteJobRef* self,
    const CMPIBroker* cb,
    const char* ns)
{
    const unsigned char* sig = __CIM_ConcreteJobRef_sig;
    KBase_Init(&self->__base, cb, sizeof(*self), sig, ns);
}

KINLINE CMPIStatus CIM_ConcreteJobRef_InitFromInstance(
    CIM_ConcreteJobRef* self,
    const CMPIBroker* cb,
    const CMPIInstance* x)
{
    CIM_ConcreteJobRef_Init(self, cb, NULL);
    return KBase_FromInstance(&self->__base, x);
}

KINLINE CMPIStatus CIM_ConcreteJobRef_InitFromObjectPath(
    CIM_ConcreteJobRef* self,
    const CMPIBroker* cb,
    const CMPIObjectPath* x)
{
    CIM_ConcreteJobRef_Init(self, cb, NULL);
    return KBase_FromObjectPath(&self->__base, x);
}

KINLINE void CIM_ConcreteJobRef_Print(
    const CIM_ConcreteJobRef* self,
    FILE* os)
{
    KBase_Print(os, &self->__base, 'r');
}

KINLINE CMPIInstance* CIM_ConcreteJobRef_ToInstance(
    const CIM_ConcreteJobRef* self,
    CMPIStatus* status)
{
    return KBase_ToInstance(&self->__base, status);
}

KINLINE CMPIObjectPath* CIM_ConcreteJobRef_ToObjectPath(
    const CIM_ConcreteJobRef* self,
    CMPIStatus* status)
{
    return KBase_ToObjectPath(&self->__base, status);
}

KINLINE const char* CIM_ConcreteJobRef_NameSpace(
    CIM_ConcreteJobRef* self)
{
    if (self && self->__base.magic == KMAGIC)
        return self->__base.ns ? KChars(self->__base.ns) : NULL;
    return NULL;
}

KINLINE void CIM_ConcreteJobRef_SetString_InstanceID(
    CIM_ConcreteJobRef* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_ConcreteJobRef_Set_InstanceID(
    CIM_ConcreteJobRef* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_ConcreteJobRef_Null_InstanceID(
    CIM_ConcreteJobRef* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_Null(field);
    }
}

KINLINE void CIM_ConcreteJobRef_Clr_InstanceID(
    CIM_ConcreteJobRef* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_Clr(field);
    }
}

/*
**==============================================================================
**
** struct CIM_ConcreteJob 
**
**==============================================================================
*/

/* classname=CIM_ConcreteJob */
typedef struct _CIM_ConcreteJob
{
    KBase __base;
    /* CIM_ManagedElement features */
    const KString InstanceID;
    const KString Caption;
    const KString Description;
    const KString ElementName;
    const KUint64 Generation;
    /* CIM_ManagedSystemElement features */
    const KDateTime InstallDate;
    const KString Name;
    const KUint16A OperationalStatus;
    const KStringA StatusDescriptions;
    const KString Status;
    const KUint16 HealthState;
    const KUint16 CommunicationStatus;
    const KUint16 DetailedStatus;
    const KUint16 OperatingStatus;
    const KUint16 PrimaryStatus;
    /* CIM_LogicalElement features */
    /* CIM_Job features */
    const KString JobStatus;
    const KDateTime TimeSubmitted;
    const KDateTime ScheduledStartTime;
    const KDateTime StartTime;
    const KDateTime ElapsedTime;
    const KUint32 JobRunTimes;
    const KUint8 RunMonth;
    const KSint8 RunDay;
    const KSint8 RunDayOfWeek;
    const KDateTime RunStartInterval;
    const KUint16 LocalOrUtcTime;
    const KDateTime UntilTime;
    const KString Notify;
    const KString Owner;
    const KUint32 Priority;
    const KUint16 PercentComplete;
    const KBoolean DeleteOnCompletion;
    const KUint16 ErrorCode;
    const KString ErrorDescription;
    const KUint16 RecoveryAction;
    const KString OtherRecoveryAction;
    /* CIM_ConcreteJob features */
    const KUint16 JobState;
    const KDateTime TimeOfLastStateChange;
    const KDateTime TimeBeforeRemoval;
    const KString JobInParameters;
    const KString JobOutParameters;
    const KString MethodName;
}
CIM_ConcreteJob;

static const unsigned char __CIM_ConcreteJob_sig[] =
{
    0x0f,0x43,0x49,0x4d,0x5f,0x43,0x6f,0x6e,0x63,0x72,0x65,0x74,0x65,0x4a,0x6f,
    0x62,0x00,0x2a,0x4c,0x0a,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x44,
    0x00,0x0c,0x07,0x43,0x61,0x70,0x74,0x69,0x6f,0x6e,0x00,0x0c,0x0b,0x44,0x65,
    0x73,0x63,0x72,0x69,0x70,0x74,0x69,0x6f,0x6e,0x00,0x0c,0x0b,0x45,0x6c,0x65,
    0x6d,0x65,0x6e,0x74,0x4e,0x61,0x6d,0x65,0x00,0x07,0x0a,0x47,0x65,0x6e,0x65,
    0x72,0x61,0x74,0x69,0x6f,0x6e,0x00,0x0d,0x0b,0x49,0x6e,0x73,0x74,0x61,0x6c,
    0x6c,0x44,0x61,0x74,0x65,0x00,0x0c,0x04,0x4e,0x61,0x6d,0x65,0x00,0x83,0x11,
    0x4f,0x70,0x65,0x72,0x61,0x74,0x69,0x6f,0x6e,0x61,0x6c,0x53,0x74,0x61,0x74,
    0x75,0x73,0x00,0x8c,0x12,0x53,0x74,0x61,0x74,0x75,0x73,0x44,0x65,0x73,0x63,
    0x72,0x69,0x70,0x74,0x69,0x6f,0x6e,0x73,0x00,0x0c,0x06,0x53,0x74,0x61,0x74,
    0x75,0x73,0x00,0x03,0x0b,0x48,0x65,0x61,0x6c,0x74,0x68,0x53,0x74,0x61,0x74,
    0x65,0x00,0x03,0x13,0x43,0x6f,0x6d,0x6d,0x75,0x6e,0x69,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x53,0x74,0x61,0x74,0x75,0x73,0x00,0x03,0x0e,0x44,0x65,0x74,0x61,
    0x69,0x6c,0x65,0x64,0x53,0x74,0x61,0x74,0x75,0x73,0x00,0x03,0x0f,0x4f,0x70,
    0x65,0x72,0x61,0x74,0x69,0x6e,0x67,0x53,0x74,0x61,0x74,0x75,0x73,0x00,0x03,
    0x0d,0x50,0x72,0x69,0x6d,0x61,0x72,0x79,0x53,0x74,0x61,0x74,0x75,0x73,0x00,
    0x0c,0x09,0x4a,0x6f,0x62,0x53,0x74,0x61,0x74,0x75,0x73,0x00,0x0d,0x0d,0x54,
    0x69,0x6d,0x65,0x53,0x75,0x62,0x6d,0x69,0x74,0x74,0x65,0x64,0x00,0x0d,0x12,
    0x53,0x63,0x68,0x65,0x64,0x75,0x6c,0x65,0x64,0x53,0x74,0x61,0x72,0x74,0x54,
    0x69,0x6d,0x65,0x00,0x0d,0x09,0x53,0x74,0x61,0x72,0x74,0x54,0x69,0x6d,0x65,
    0x00,0x0d,0x0b,0x45,0x6c,0x61,0x70,0x73,0x65,0x64,0x54,0x69,0x6d,0x65,0x00,
    0x05,0x0b,0x4a,0x6f,0x62,0x52,0x75,0x6e,0x54,0x69,0x6d,0x65,0x73,0x00,0x01,
    0x08,0x52,0x75,0x6e,0x4d,0x6f,0x6e,0x74,0x68,0x00,0x02,0x06,0x52,0x75,0x6e,
    0x44,0x61,0x79,0x00,0x02,0x0c,0x52,0x75,0x6e,0x44,0x61,0x79,0x4f,0x66,0x57,
    0x65,0x65,0x6b,0x00,0x0d,0x10,0x52,0x75,0x6e,0x53,0x74,0x61,0x72,0x74,0x49,
    0x6e,0x74,0x65,0x72,0x76,0x61,0x6c,0x00,0x03,0x0e,0x4c,0x6f,0x63,0x61,0x6c,
    0x4f,0x72,0x55,0x74,0x63,0x54,0x69,0x6d,0x65,0x00,0x0d,0x09,0x55,0x6e,0x74,
    0x69,0x6c,0x54,0x69,0x6d,0x65,0x00,0x0c,0x06,0x4e,0x6f,0x74,0x69,0x66,0x79,
    0x00,0x0c,0x05,0x4f,0x77,0x6e,0x65,0x72,0x00,0x05,0x08,0x50,0x72,0x69,0x6f,
    0x72,0x69,0x74,0x79,0x00,0x03,0x0f,0x50,0x65,0x72,0x63,0x65,0x6e,0x74,0x43,
    0x6f,0x6d,0x70,0x6c,0x65,0x74,0x65,0x00,0x00,0x12,0x44,0x65,0x6c,0x65,0x74,
    0x65,0x4f,0x6e,0x43,0x6f,0x6d,0x70,0x6c,0x65,0x74,0x69,0x6f,0x6e,0x00,0x03,
    0x09,0x45,0x72,0x72,0x6f,0x72,0x43,0x6f,0x64,0x65,0x00,0x0c,0x10,0x45,0x72,
    0x72,0x6f,0x72,0x44,0x65,0x73,0x63,0x72,0x69,0x70,0x74,0x69,0x6f,0x6e,0x00,
    0x03,0x0e,0x52,0x65,0x63,0x6f,0x76,0x65,0x72,0x79,0x41,0x63,0x74,0x69,0x6f,
    0x6e,0x00,0x0c,0x13,0x4f,0x74,0x68,0x65,0x72,0x52,0x65,0x63,0x6f,0x76,0x65,
    0x72,0x79,0x41,0x63,0x74,0x69,0x6f,0x6e,0x00,0x03,0x08,0x4a,0x6f,0x62,0x53,
    0x74,0x61,0x74,0x65,0x00,0x0d,0x15,0x54,0x69,0x6d,0x65,0x4f,0x66,0x4c,0x61,
    0x73,0x74,0x53,0x74,0x61,0x74,0x65,0x43,0x68,0x61,0x6e,0x67,0x65,0x00,0x0d,
    0x11,0x54,0x69,0x6d,0x65,0x42,0x65,0x66,0x6f,0x72,0x65,0x52,0x65,0x6d,0x6f,
    0x76,0x61,0x6c,0x00,0x0c,0x0f,0x4a,0x6f,0x62,0x49,0x6e,0x50,0x61,0x72,0x61,
    0x6d,0x65,0x74,0x65,0x72,0x73,0x00,0x0c,0x10,0x4a,0x6f,0x62,0x4f,0x75,0x74,
    0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x00,0x0c,0x0a,0x4d,0x65,
    0x74,0x68,0x6f,0x64,0x4e,0x61,0x6d,0x65,0x00,
};

KINLINE void CIM_ConcreteJob_Init(
    CIM_ConcreteJob* self,
    const CMPIBroker* cb,
    const char* ns)
{
    const unsigned char* sig = __CIM_ConcreteJob_sig;
    KBase_Init(&self->__base, cb, sizeof(*self), sig, ns);
}

KINLINE CMPIStatus CIM_ConcreteJob_InitFromInstance(
    CIM_ConcreteJob* self,
    const CMPIBroker* cb,
    const CMPIInstance* x)
{
    CIM_ConcreteJob_Init(self, cb, NULL);
    return KBase_FromInstance(&self->__base, x);
}

KINLINE CMPIStatus CIM_ConcreteJob_InitFromObjectPath(
    CIM_ConcreteJob* self,
    const CMPIBroker* cb,
    const CMPIObjectPath* x)
{
    CIM_ConcreteJob_Init(self, cb, NULL);
    return KBase_FromObjectPath(&self->__base, x);
}

KINLINE void CIM_ConcreteJob_Print(
    const CIM_ConcreteJob* self,
    FILE* os)
{
    KBase_Print(os, &self->__base, 'i');
}

KINLINE CMPIInstance* CIM_ConcreteJob_ToInstance(
    const CIM_ConcreteJob* self,
    CMPIStatus* status)
{
    return KBase_ToInstance(&self->__base, status);
}

KINLINE CMPIObjectPath* CIM_ConcreteJob_ToObjectPath(
    const CIM_ConcreteJob* self,
    CMPIStatus* status)
{
    return KBase_ToObjectPath(&self->__base, status);
}

KINLINE const char* CIM_ConcreteJob_NameSpace(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
        return self->__base.ns ? KChars(self->__base.ns) : NULL;
    return NULL;
}

KINLINE void CIM_ConcreteJob_SetString_InstanceID(
    CIM_ConcreteJob* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Set_InstanceID(
    CIM_ConcreteJob* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_ConcreteJob_Null_InstanceID(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_InstanceID(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_SetString_Caption(
    CIM_ConcreteJob* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Caption;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Set_Caption(
    CIM_ConcreteJob* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Caption;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_ConcreteJob_Null_Caption(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Caption;
        KString_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_Caption(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Caption;
        KString_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_SetString_Description(
    CIM_ConcreteJob* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Description;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Set_Description(
    CIM_ConcreteJob* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Description;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_ConcreteJob_Null_Description(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Description;
        KString_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_Description(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Description;
        KString_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_SetString_ElementName(
    CIM_ConcreteJob* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ElementName;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Set_ElementName(
    CIM_ConcreteJob* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ElementName;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_ConcreteJob_Null_ElementName(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ElementName;
        KString_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_ElementName(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ElementName;
        KString_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_Set_Generation(
    CIM_ConcreteJob* self,
    CMPIUint64 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint64* field = (KUint64*)&self->Generation;
        KUint64_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_Generation(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint64* field = (KUint64*)&self->Generation;
        KUint64_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_Generation(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint64* field = (KUint64*)&self->Generation;
        KUint64_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_Set_InstallDate(
    CIM_ConcreteJob* self,
    CMPIDateTime* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->InstallDate;
        KDateTime_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_InstallDate(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->InstallDate;
        KDateTime_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_InstallDate(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->InstallDate;
        KDateTime_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_SetString_Name(
    CIM_ConcreteJob* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Name;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Set_Name(
    CIM_ConcreteJob* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Name;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_ConcreteJob_Null_Name(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Name;
        KString_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_Name(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Name;
        KString_Clr(field);
    }
}

KINLINE CMPIBoolean CIM_ConcreteJob_Init_OperationalStatus(
    CIM_ConcreteJob* self,
    CMPICount count)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16A* field = (KUint16A*)&self->OperationalStatus;
        return KUint16A_Init(field, self->__base.cb, count);
    }
    return 0;
}

KINLINE void CIM_ConcreteJob_InitNull_OperationalStatus(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16A* field = (KUint16A*)&self->OperationalStatus;
        KUint16A_InitNull(field);
    }
}

KINLINE CMPIBoolean CIM_ConcreteJob_Set_OperationalStatus(
    CIM_ConcreteJob* self,
    CMPICount i,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16A* field = (KUint16A*)&self->OperationalStatus;
        return KUint16A_Set(field, i, x);
    }
    return 0;
}

KINLINE KUint16 CIM_ConcreteJob_Get_OperationalStatus(
    CIM_ConcreteJob* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16A* field = (KUint16A*)&self->OperationalStatus;
        return KUint16A_Get(field, i);
    }
    return KUint16A_Get(NULL, 0);
}

KINLINE CMPIBoolean CIM_ConcreteJob_Null_OperationalStatus(
    CIM_ConcreteJob* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16A* field = (KUint16A*)&self->OperationalStatus;
        return KUint16A_Null(field, i);
    }
    return 0;
}

KINLINE void CIM_ConcreteJob_Clr_OperationalStatus(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16A* field = (KUint16A*)&self->OperationalStatus;
        KUint16A_Clr(field);
    }
}

typedef enum _CIM_ConcreteJob_OperationalStatus_Enum
{
    CIM_ConcreteJob_OperationalStatus_Unknown = 0,
    CIM_ConcreteJob_OperationalStatus_Other = 1,
    CIM_ConcreteJob_OperationalStatus_OK = 2,
    CIM_ConcreteJob_OperationalStatus_Degraded = 3,
    CIM_ConcreteJob_OperationalStatus_Stressed = 4,
    CIM_ConcreteJob_OperationalStatus_Predictive_Failure = 5,
    CIM_ConcreteJob_OperationalStatus_Error = 6,
    CIM_ConcreteJob_OperationalStatus_Non_Recoverable_Error = 7,
    CIM_ConcreteJob_OperationalStatus_Starting = 8,
    CIM_ConcreteJob_OperationalStatus_Stopping = 9,
    CIM_ConcreteJob_OperationalStatus_Stopped = 10,
    CIM_ConcreteJob_OperationalStatus_In_Service = 11,
    CIM_ConcreteJob_OperationalStatus_No_Contact = 12,
    CIM_ConcreteJob_OperationalStatus_Lost_Communication = 13,
    CIM_ConcreteJob_OperationalStatus_Aborted = 14,
    CIM_ConcreteJob_OperationalStatus_Dormant = 15,
    CIM_ConcreteJob_OperationalStatus_Supporting_Entity_in_Error = 16,
    CIM_ConcreteJob_OperationalStatus_Completed = 17,
    CIM_ConcreteJob_OperationalStatus_Power_Mode = 18,
    CIM_ConcreteJob_OperationalStatus_Relocating = 19,
    CIM_ConcreteJob_OperationalStatus_DMTF_Reserved = 0,
    CIM_ConcreteJob_OperationalStatus_Vendor_Reserved = 0,
}
CIM_ConcreteJob_OperationalStatus_Enum;

/* "Unknown" */
#define CIM_ConcreteJob_Set_OperationalStatus_Unknown(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 0)

/* "Other" */
#define CIM_ConcreteJob_Set_OperationalStatus_Other(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 1)

/* "OK" */
#define CIM_ConcreteJob_Set_OperationalStatus_OK(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 2)

/* "Degraded" */
#define CIM_ConcreteJob_Set_OperationalStatus_Degraded(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 3)

/* "Stressed" */
#define CIM_ConcreteJob_Set_OperationalStatus_Stressed(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 4)

/* "Predictive Failure" */
#define CIM_ConcreteJob_Set_OperationalStatus_Predictive_Failure(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 5)

/* "Error" */
#define CIM_ConcreteJob_Set_OperationalStatus_Error(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 6)

/* "Non-Recoverable Error" */
#define CIM_ConcreteJob_Set_OperationalStatus_Non_Recoverable_Error(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 7)

/* "Starting" */
#define CIM_ConcreteJob_Set_OperationalStatus_Starting(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 8)

/* "Stopping" */
#define CIM_ConcreteJob_Set_OperationalStatus_Stopping(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 9)

/* "Stopped" */
#define CIM_ConcreteJob_Set_OperationalStatus_Stopped(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 10)

/* "In Service" */
#define CIM_ConcreteJob_Set_OperationalStatus_In_Service(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 11)

/* "No Contact" */
#define CIM_ConcreteJob_Set_OperationalStatus_No_Contact(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 12)

/* "Lost Communication" */
#define CIM_ConcreteJob_Set_OperationalStatus_Lost_Communication(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 13)

/* "Aborted" */
#define CIM_ConcreteJob_Set_OperationalStatus_Aborted(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 14)

/* "Dormant" */
#define CIM_ConcreteJob_Set_OperationalStatus_Dormant(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 15)

/* "Supporting Entity in Error" */
#define CIM_ConcreteJob_Set_OperationalStatus_Supporting_Entity_in_Error(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 16)

/* "Completed" */
#define CIM_ConcreteJob_Set_OperationalStatus_Completed(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 17)

/* "Power Mode" */
#define CIM_ConcreteJob_Set_OperationalStatus_Power_Mode(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 18)

/* "Relocating" */
#define CIM_ConcreteJob_Set_OperationalStatus_Relocating(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 19)

/* "DMTF Reserved" */
#define CIM_ConcreteJob_Set_OperationalStatus_DMTF_Reserved(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 0)

/* "Vendor Reserved" */
#define CIM_ConcreteJob_Set_OperationalStatus_Vendor_Reserved(SELF, INDEX)\
    CIM_ConcreteJob_Set_OperationalStatus(SELF, INDEX, 0)

KINLINE CMPIBoolean CIM_ConcreteJob_Init_StatusDescriptions(
    CIM_ConcreteJob* self,
    CMPICount count)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->StatusDescriptions;
        return KStringA_Init(field, self->__base.cb, count);
    }
    return 0;
}

KINLINE void CIM_ConcreteJob_InitNull_StatusDescriptions(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->StatusDescriptions;
        KStringA_InitNull(field);
    }
}

KINLINE CMPIBoolean CIM_ConcreteJob_SetString_StatusDescriptions(
    CIM_ConcreteJob* self,
    CMPICount i,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->StatusDescriptions;
        return KStringA_SetString(field, i, x);
    }
    return 0;
}

KINLINE CMPIBoolean CIM_ConcreteJob_Set_StatusDescriptions(
    CIM_ConcreteJob* self,
    CMPICount i,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->StatusDescriptions;
        return KStringA_Set(field, self->__base.cb, i, s);
    }
    return 0;
}

KINLINE KString CIM_ConcreteJob_GetString_StatusDescriptions(
    CIM_ConcreteJob* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->StatusDescriptions;
        return KStringA_GetString(field, i);
    }
    return KStringA_GetString(NULL, 0);
}

KINLINE const char* CIM_ConcreteJob_Get_StatusDescriptions(
    CIM_ConcreteJob* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->StatusDescriptions;
        return KStringA_Get(field, i);
    }
    return NULL;
}

KINLINE CMPIBoolean CIM_ConcreteJob_Null_StatusDescriptions(
    CIM_ConcreteJob* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->StatusDescriptions;
        return KStringA_Null(field, i);
    }
    return 0;
}

KINLINE void CIM_ConcreteJob_Clr_StatusDescriptions(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->StatusDescriptions;
        KStringA_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_SetString_Status(
    CIM_ConcreteJob* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Status;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Set_Status(
    CIM_ConcreteJob* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Status;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_ConcreteJob_Null_Status(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Status;
        KString_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_Status(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Status;
        KString_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_Set_HealthState(
    CIM_ConcreteJob* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->HealthState;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_HealthState(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->HealthState;
        KUint16_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_HealthState(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->HealthState;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_ConcreteJob_HealthState_Enum
{
    CIM_ConcreteJob_HealthState_Unknown = 0,
    CIM_ConcreteJob_HealthState_OK = 5,
    CIM_ConcreteJob_HealthState_Degraded_Warning = 10,
    CIM_ConcreteJob_HealthState_Minor_failure = 15,
    CIM_ConcreteJob_HealthState_Major_failure = 20,
    CIM_ConcreteJob_HealthState_Critical_failure = 25,
    CIM_ConcreteJob_HealthState_Non_recoverable_error = 30,
    CIM_ConcreteJob_HealthState_DMTF_Reserved = 0,
    CIM_ConcreteJob_HealthState_Vendor_Specific = 32768,
}
CIM_ConcreteJob_HealthState_Enum;

/* "Unknown" */
#define CIM_ConcreteJob_Set_HealthState_Unknown(SELF) \
    CIM_ConcreteJob_Set_HealthState(SELF, 0)

/* "OK" */
#define CIM_ConcreteJob_Set_HealthState_OK(SELF) \
    CIM_ConcreteJob_Set_HealthState(SELF, 5)

/* "Degraded/Warning" */
#define CIM_ConcreteJob_Set_HealthState_Degraded_Warning(SELF) \
    CIM_ConcreteJob_Set_HealthState(SELF, 10)

/* "Minor failure" */
#define CIM_ConcreteJob_Set_HealthState_Minor_failure(SELF) \
    CIM_ConcreteJob_Set_HealthState(SELF, 15)

/* "Major failure" */
#define CIM_ConcreteJob_Set_HealthState_Major_failure(SELF) \
    CIM_ConcreteJob_Set_HealthState(SELF, 20)

/* "Critical failure" */
#define CIM_ConcreteJob_Set_HealthState_Critical_failure(SELF) \
    CIM_ConcreteJob_Set_HealthState(SELF, 25)

/* "Non-recoverable error" */
#define CIM_ConcreteJob_Set_HealthState_Non_recoverable_error(SELF) \
    CIM_ConcreteJob_Set_HealthState(SELF, 30)

/* "DMTF Reserved" */
#define CIM_ConcreteJob_Set_HealthState_DMTF_Reserved(SELF) \
    CIM_ConcreteJob_Set_HealthState(SELF, 0)

/* "Vendor Specific" */
#define CIM_ConcreteJob_Set_HealthState_Vendor_Specific(SELF) \
    CIM_ConcreteJob_Set_HealthState(SELF, 32768)

KINLINE void CIM_ConcreteJob_Set_CommunicationStatus(
    CIM_ConcreteJob* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->CommunicationStatus;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_CommunicationStatus(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->CommunicationStatus;
        KUint16_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_CommunicationStatus(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->CommunicationStatus;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_ConcreteJob_CommunicationStatus_Enum
{
    CIM_ConcreteJob_CommunicationStatus_Unknown = 0,
    CIM_ConcreteJob_CommunicationStatus_Not_Available = 1,
    CIM_ConcreteJob_CommunicationStatus_Communication_OK = 2,
    CIM_ConcreteJob_CommunicationStatus_Lost_Communication = 3,
    CIM_ConcreteJob_CommunicationStatus_No_Contact = 4,
    CIM_ConcreteJob_CommunicationStatus_DMTF_Reserved = 0,
    CIM_ConcreteJob_CommunicationStatus_Vendor_Reserved = 0,
}
CIM_ConcreteJob_CommunicationStatus_Enum;

/* "Unknown" */
#define CIM_ConcreteJob_Set_CommunicationStatus_Unknown(SELF) \
    CIM_ConcreteJob_Set_CommunicationStatus(SELF, 0)

/* "Not Available" */
#define CIM_ConcreteJob_Set_CommunicationStatus_Not_Available(SELF) \
    CIM_ConcreteJob_Set_CommunicationStatus(SELF, 1)

/* "Communication OK" */
#define CIM_ConcreteJob_Set_CommunicationStatus_Communication_OK(SELF) \
    CIM_ConcreteJob_Set_CommunicationStatus(SELF, 2)

/* "Lost Communication" */
#define CIM_ConcreteJob_Set_CommunicationStatus_Lost_Communication(SELF) \
    CIM_ConcreteJob_Set_CommunicationStatus(SELF, 3)

/* "No Contact" */
#define CIM_ConcreteJob_Set_CommunicationStatus_No_Contact(SELF) \
    CIM_ConcreteJob_Set_CommunicationStatus(SELF, 4)

/* "DMTF Reserved" */
#define CIM_ConcreteJob_Set_CommunicationStatus_DMTF_Reserved(SELF) \
    CIM_ConcreteJob_Set_CommunicationStatus(SELF, 0)

/* "Vendor Reserved" */
#define CIM_ConcreteJob_Set_CommunicationStatus_Vendor_Reserved(SELF) \
    CIM_ConcreteJob_Set_CommunicationStatus(SELF, 0)

KINLINE void CIM_ConcreteJob_Set_DetailedStatus(
    CIM_ConcreteJob* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->DetailedStatus;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_DetailedStatus(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->DetailedStatus;
        KUint16_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_DetailedStatus(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->DetailedStatus;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_ConcreteJob_DetailedStatus_Enum
{
    CIM_ConcreteJob_DetailedStatus_Not_Available = 0,
    CIM_ConcreteJob_DetailedStatus_No_Additional_Information = 1,
    CIM_ConcreteJob_DetailedStatus_Stressed = 2,
    CIM_ConcreteJob_DetailedStatus_Predictive_Failure = 3,
    CIM_ConcreteJob_DetailedStatus_Non_Recoverable_Error = 4,
    CIM_ConcreteJob_DetailedStatus_Supporting_Entity_in_Error = 5,
    CIM_ConcreteJob_DetailedStatus_DMTF_Reserved = 0,
    CIM_ConcreteJob_DetailedStatus_Vendor_Reserved = 0,
}
CIM_ConcreteJob_DetailedStatus_Enum;

/* "Not Available" */
#define CIM_ConcreteJob_Set_DetailedStatus_Not_Available(SELF) \
    CIM_ConcreteJob_Set_DetailedStatus(SELF, 0)

/* "No Additional Information" */
#define CIM_ConcreteJob_Set_DetailedStatus_No_Additional_Information(SELF) \
    CIM_ConcreteJob_Set_DetailedStatus(SELF, 1)

/* "Stressed" */
#define CIM_ConcreteJob_Set_DetailedStatus_Stressed(SELF) \
    CIM_ConcreteJob_Set_DetailedStatus(SELF, 2)

/* "Predictive Failure" */
#define CIM_ConcreteJob_Set_DetailedStatus_Predictive_Failure(SELF) \
    CIM_ConcreteJob_Set_DetailedStatus(SELF, 3)

/* "Non-Recoverable Error" */
#define CIM_ConcreteJob_Set_DetailedStatus_Non_Recoverable_Error(SELF) \
    CIM_ConcreteJob_Set_DetailedStatus(SELF, 4)

/* "Supporting Entity in Error" */
#define CIM_ConcreteJob_Set_DetailedStatus_Supporting_Entity_in_Error(SELF) \
    CIM_ConcreteJob_Set_DetailedStatus(SELF, 5)

/* "DMTF Reserved" */
#define CIM_ConcreteJob_Set_DetailedStatus_DMTF_Reserved(SELF) \
    CIM_ConcreteJob_Set_DetailedStatus(SELF, 0)

/* "Vendor Reserved" */
#define CIM_ConcreteJob_Set_DetailedStatus_Vendor_Reserved(SELF) \
    CIM_ConcreteJob_Set_DetailedStatus(SELF, 0)

KINLINE void CIM_ConcreteJob_Set_OperatingStatus(
    CIM_ConcreteJob* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->OperatingStatus;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_OperatingStatus(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->OperatingStatus;
        KUint16_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_OperatingStatus(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->OperatingStatus;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_ConcreteJob_OperatingStatus_Enum
{
    CIM_ConcreteJob_OperatingStatus_Unknown = 0,
    CIM_ConcreteJob_OperatingStatus_Not_Available = 1,
    CIM_ConcreteJob_OperatingStatus_Servicing = 2,
    CIM_ConcreteJob_OperatingStatus_Starting = 3,
    CIM_ConcreteJob_OperatingStatus_Stopping = 4,
    CIM_ConcreteJob_OperatingStatus_Stopped = 5,
    CIM_ConcreteJob_OperatingStatus_Aborted = 6,
    CIM_ConcreteJob_OperatingStatus_Dormant = 7,
    CIM_ConcreteJob_OperatingStatus_Completed = 8,
    CIM_ConcreteJob_OperatingStatus_Migrating = 9,
    CIM_ConcreteJob_OperatingStatus_Emigrating = 10,
    CIM_ConcreteJob_OperatingStatus_Immigrating = 11,
    CIM_ConcreteJob_OperatingStatus_Snapshotting = 12,
    CIM_ConcreteJob_OperatingStatus_Shutting_Down = 13,
    CIM_ConcreteJob_OperatingStatus_In_Test = 14,
    CIM_ConcreteJob_OperatingStatus_Transitioning = 15,
    CIM_ConcreteJob_OperatingStatus_In_Service = 16,
    CIM_ConcreteJob_OperatingStatus_DMTF_Reserved = 0,
    CIM_ConcreteJob_OperatingStatus_Vendor_Reserved = 0,
}
CIM_ConcreteJob_OperatingStatus_Enum;

/* "Unknown" */
#define CIM_ConcreteJob_Set_OperatingStatus_Unknown(SELF) \
    CIM_ConcreteJob_Set_OperatingStatus(SELF, 0)

/* "Not Available" */
#define CIM_ConcreteJob_Set_OperatingStatus_Not_Available(SELF) \
    CIM_ConcreteJob_Set_OperatingStatus(SELF, 1)

/* "Servicing" */
#define CIM_ConcreteJob_Set_OperatingStatus_Servicing(SELF) \
    CIM_ConcreteJob_Set_OperatingStatus(SELF, 2)

/* "Starting" */
#define CIM_ConcreteJob_Set_OperatingStatus_Starting(SELF) \
    CIM_ConcreteJob_Set_OperatingStatus(SELF, 3)

/* "Stopping" */
#define CIM_ConcreteJob_Set_OperatingStatus_Stopping(SELF) \
    CIM_ConcreteJob_Set_OperatingStatus(SELF, 4)

/* "Stopped" */
#define CIM_ConcreteJob_Set_OperatingStatus_Stopped(SELF) \
    CIM_ConcreteJob_Set_OperatingStatus(SELF, 5)

/* "Aborted" */
#define CIM_ConcreteJob_Set_OperatingStatus_Aborted(SELF) \
    CIM_ConcreteJob_Set_OperatingStatus(SELF, 6)

/* "Dormant" */
#define CIM_ConcreteJob_Set_OperatingStatus_Dormant(SELF) \
    CIM_ConcreteJob_Set_OperatingStatus(SELF, 7)

/* "Completed" */
#define CIM_ConcreteJob_Set_OperatingStatus_Completed(SELF) \
    CIM_ConcreteJob_Set_OperatingStatus(SELF, 8)

/* "Migrating" */
#define CIM_ConcreteJob_Set_OperatingStatus_Migrating(SELF) \
    CIM_ConcreteJob_Set_OperatingStatus(SELF, 9)

/* "Emigrating" */
#define CIM_ConcreteJob_Set_OperatingStatus_Emigrating(SELF) \
    CIM_ConcreteJob_Set_OperatingStatus(SELF, 10)

/* "Immigrating" */
#define CIM_ConcreteJob_Set_OperatingStatus_Immigrating(SELF) \
    CIM_ConcreteJob_Set_OperatingStatus(SELF, 11)

/* "Snapshotting" */
#define CIM_ConcreteJob_Set_OperatingStatus_Snapshotting(SELF) \
    CIM_ConcreteJob_Set_OperatingStatus(SELF, 12)

/* "Shutting Down" */
#define CIM_ConcreteJob_Set_OperatingStatus_Shutting_Down(SELF) \
    CIM_ConcreteJob_Set_OperatingStatus(SELF, 13)

/* "In Test" */
#define CIM_ConcreteJob_Set_OperatingStatus_In_Test(SELF) \
    CIM_ConcreteJob_Set_OperatingStatus(SELF, 14)

/* "Transitioning" */
#define CIM_ConcreteJob_Set_OperatingStatus_Transitioning(SELF) \
    CIM_ConcreteJob_Set_OperatingStatus(SELF, 15)

/* "In Service" */
#define CIM_ConcreteJob_Set_OperatingStatus_In_Service(SELF) \
    CIM_ConcreteJob_Set_OperatingStatus(SELF, 16)

/* "DMTF Reserved" */
#define CIM_ConcreteJob_Set_OperatingStatus_DMTF_Reserved(SELF) \
    CIM_ConcreteJob_Set_OperatingStatus(SELF, 0)

/* "Vendor Reserved" */
#define CIM_ConcreteJob_Set_OperatingStatus_Vendor_Reserved(SELF) \
    CIM_ConcreteJob_Set_OperatingStatus(SELF, 0)

KINLINE void CIM_ConcreteJob_Set_PrimaryStatus(
    CIM_ConcreteJob* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->PrimaryStatus;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_PrimaryStatus(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->PrimaryStatus;
        KUint16_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_PrimaryStatus(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->PrimaryStatus;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_ConcreteJob_PrimaryStatus_Enum
{
    CIM_ConcreteJob_PrimaryStatus_Unknown = 0,
    CIM_ConcreteJob_PrimaryStatus_OK = 1,
    CIM_ConcreteJob_PrimaryStatus_Degraded = 2,
    CIM_ConcreteJob_PrimaryStatus_Error = 3,
    CIM_ConcreteJob_PrimaryStatus_DMTF_Reserved = 0,
    CIM_ConcreteJob_PrimaryStatus_Vendor_Reserved = 0,
}
CIM_ConcreteJob_PrimaryStatus_Enum;

/* "Unknown" */
#define CIM_ConcreteJob_Set_PrimaryStatus_Unknown(SELF) \
    CIM_ConcreteJob_Set_PrimaryStatus(SELF, 0)

/* "OK" */
#define CIM_ConcreteJob_Set_PrimaryStatus_OK(SELF) \
    CIM_ConcreteJob_Set_PrimaryStatus(SELF, 1)

/* "Degraded" */
#define CIM_ConcreteJob_Set_PrimaryStatus_Degraded(SELF) \
    CIM_ConcreteJob_Set_PrimaryStatus(SELF, 2)

/* "Error" */
#define CIM_ConcreteJob_Set_PrimaryStatus_Error(SELF) \
    CIM_ConcreteJob_Set_PrimaryStatus(SELF, 3)

/* "DMTF Reserved" */
#define CIM_ConcreteJob_Set_PrimaryStatus_DMTF_Reserved(SELF) \
    CIM_ConcreteJob_Set_PrimaryStatus(SELF, 0)

/* "Vendor Reserved" */
#define CIM_ConcreteJob_Set_PrimaryStatus_Vendor_Reserved(SELF) \
    CIM_ConcreteJob_Set_PrimaryStatus(SELF, 0)

KINLINE void CIM_ConcreteJob_SetString_JobStatus(
    CIM_ConcreteJob* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->JobStatus;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Set_JobStatus(
    CIM_ConcreteJob* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->JobStatus;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_ConcreteJob_Null_JobStatus(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->JobStatus;
        KString_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_JobStatus(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->JobStatus;
        KString_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_Set_TimeSubmitted(
    CIM_ConcreteJob* self,
    CMPIDateTime* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->TimeSubmitted;
        KDateTime_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_TimeSubmitted(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->TimeSubmitted;
        KDateTime_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_TimeSubmitted(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->TimeSubmitted;
        KDateTime_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_Set_ScheduledStartTime(
    CIM_ConcreteJob* self,
    CMPIDateTime* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->ScheduledStartTime;
        KDateTime_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_ScheduledStartTime(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->ScheduledStartTime;
        KDateTime_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_ScheduledStartTime(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->ScheduledStartTime;
        KDateTime_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_Set_StartTime(
    CIM_ConcreteJob* self,
    CMPIDateTime* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->StartTime;
        KDateTime_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_StartTime(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->StartTime;
        KDateTime_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_StartTime(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->StartTime;
        KDateTime_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_Set_ElapsedTime(
    CIM_ConcreteJob* self,
    CMPIDateTime* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->ElapsedTime;
        KDateTime_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_ElapsedTime(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->ElapsedTime;
        KDateTime_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_ElapsedTime(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->ElapsedTime;
        KDateTime_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_Set_JobRunTimes(
    CIM_ConcreteJob* self,
    CMPIUint32 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint32* field = (KUint32*)&self->JobRunTimes;
        KUint32_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_JobRunTimes(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint32* field = (KUint32*)&self->JobRunTimes;
        KUint32_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_JobRunTimes(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint32* field = (KUint32*)&self->JobRunTimes;
        KUint32_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_Set_RunMonth(
    CIM_ConcreteJob* self,
    CMPIUint8 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint8* field = (KUint8*)&self->RunMonth;
        KUint8_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_RunMonth(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint8* field = (KUint8*)&self->RunMonth;
        KUint8_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_RunMonth(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint8* field = (KUint8*)&self->RunMonth;
        KUint8_Clr(field);
    }
}

typedef enum _CIM_ConcreteJob_RunMonth_Enum
{
    CIM_ConcreteJob_RunMonth_January = 0,
    CIM_ConcreteJob_RunMonth_February = 1,
    CIM_ConcreteJob_RunMonth_March = 2,
    CIM_ConcreteJob_RunMonth_April = 3,
    CIM_ConcreteJob_RunMonth_May = 4,
    CIM_ConcreteJob_RunMonth_June = 5,
    CIM_ConcreteJob_RunMonth_July = 6,
    CIM_ConcreteJob_RunMonth_August = 7,
    CIM_ConcreteJob_RunMonth_September = 8,
    CIM_ConcreteJob_RunMonth_October = 9,
    CIM_ConcreteJob_RunMonth_November = 10,
    CIM_ConcreteJob_RunMonth_December = 11,
}
CIM_ConcreteJob_RunMonth_Enum;

/* "January" */
#define CIM_ConcreteJob_Set_RunMonth_January(SELF) \
    CIM_ConcreteJob_Set_RunMonth(SELF, 0)

/* "February" */
#define CIM_ConcreteJob_Set_RunMonth_February(SELF) \
    CIM_ConcreteJob_Set_RunMonth(SELF, 1)

/* "March" */
#define CIM_ConcreteJob_Set_RunMonth_March(SELF) \
    CIM_ConcreteJob_Set_RunMonth(SELF, 2)

/* "April" */
#define CIM_ConcreteJob_Set_RunMonth_April(SELF) \
    CIM_ConcreteJob_Set_RunMonth(SELF, 3)

/* "May" */
#define CIM_ConcreteJob_Set_RunMonth_May(SELF) \
    CIM_ConcreteJob_Set_RunMonth(SELF, 4)

/* "June" */
#define CIM_ConcreteJob_Set_RunMonth_June(SELF) \
    CIM_ConcreteJob_Set_RunMonth(SELF, 5)

/* "July" */
#define CIM_ConcreteJob_Set_RunMonth_July(SELF) \
    CIM_ConcreteJob_Set_RunMonth(SELF, 6)

/* "August" */
#define CIM_ConcreteJob_Set_RunMonth_August(SELF) \
    CIM_ConcreteJob_Set_RunMonth(SELF, 7)

/* "September" */
#define CIM_ConcreteJob_Set_RunMonth_September(SELF) \
    CIM_ConcreteJob_Set_RunMonth(SELF, 8)

/* "October" */
#define CIM_ConcreteJob_Set_RunMonth_October(SELF) \
    CIM_ConcreteJob_Set_RunMonth(SELF, 9)

/* "November" */
#define CIM_ConcreteJob_Set_RunMonth_November(SELF) \
    CIM_ConcreteJob_Set_RunMonth(SELF, 10)

/* "December" */
#define CIM_ConcreteJob_Set_RunMonth_December(SELF) \
    CIM_ConcreteJob_Set_RunMonth(SELF, 11)

KINLINE void CIM_ConcreteJob_Set_RunDay(
    CIM_ConcreteJob* self,
    CMPISint8 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KSint8* field = (KSint8*)&self->RunDay;
        KSint8_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_RunDay(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KSint8* field = (KSint8*)&self->RunDay;
        KSint8_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_RunDay(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KSint8* field = (KSint8*)&self->RunDay;
        KSint8_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_Set_RunDayOfWeek(
    CIM_ConcreteJob* self,
    CMPISint8 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KSint8* field = (KSint8*)&self->RunDayOfWeek;
        KSint8_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_RunDayOfWeek(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KSint8* field = (KSint8*)&self->RunDayOfWeek;
        KSint8_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_RunDayOfWeek(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KSint8* field = (KSint8*)&self->RunDayOfWeek;
        KSint8_Clr(field);
    }
}

typedef enum _CIM_ConcreteJob_RunDayOfWeek_Enum
{
    CIM_ConcreteJob_RunDayOfWeek__Saturday = -7,
    CIM_ConcreteJob_RunDayOfWeek__Friday = -6,
    CIM_ConcreteJob_RunDayOfWeek__Thursday = -5,
    CIM_ConcreteJob_RunDayOfWeek__Wednesday = -4,
    CIM_ConcreteJob_RunDayOfWeek__Tuesday = -3,
    CIM_ConcreteJob_RunDayOfWeek__Monday = -2,
    CIM_ConcreteJob_RunDayOfWeek__Sunday = -1,
    CIM_ConcreteJob_RunDayOfWeek_ExactDayOfMonth = 0,
    CIM_ConcreteJob_RunDayOfWeek_Sunday = 1,
    CIM_ConcreteJob_RunDayOfWeek_Monday = 2,
    CIM_ConcreteJob_RunDayOfWeek_Tuesday = 3,
    CIM_ConcreteJob_RunDayOfWeek_Wednesday = 4,
    CIM_ConcreteJob_RunDayOfWeek_Thursday = 5,
    CIM_ConcreteJob_RunDayOfWeek_Friday = 6,
    CIM_ConcreteJob_RunDayOfWeek_Saturday = 7,
}
CIM_ConcreteJob_RunDayOfWeek_Enum;

/* "-Saturday" */
#define CIM_ConcreteJob_Set_RunDayOfWeek__Saturday(SELF) \
    CIM_ConcreteJob_Set_RunDayOfWeek(SELF, -7)

/* "-Friday" */
#define CIM_ConcreteJob_Set_RunDayOfWeek__Friday(SELF) \
    CIM_ConcreteJob_Set_RunDayOfWeek(SELF, -6)

/* "-Thursday" */
#define CIM_ConcreteJob_Set_RunDayOfWeek__Thursday(SELF) \
    CIM_ConcreteJob_Set_RunDayOfWeek(SELF, -5)

/* "-Wednesday" */
#define CIM_ConcreteJob_Set_RunDayOfWeek__Wednesday(SELF) \
    CIM_ConcreteJob_Set_RunDayOfWeek(SELF, -4)

/* "-Tuesday" */
#define CIM_ConcreteJob_Set_RunDayOfWeek__Tuesday(SELF) \
    CIM_ConcreteJob_Set_RunDayOfWeek(SELF, -3)

/* "-Monday" */
#define CIM_ConcreteJob_Set_RunDayOfWeek__Monday(SELF) \
    CIM_ConcreteJob_Set_RunDayOfWeek(SELF, -2)

/* "-Sunday" */
#define CIM_ConcreteJob_Set_RunDayOfWeek__Sunday(SELF) \
    CIM_ConcreteJob_Set_RunDayOfWeek(SELF, -1)

/* "ExactDayOfMonth" */
#define CIM_ConcreteJob_Set_RunDayOfWeek_ExactDayOfMonth(SELF) \
    CIM_ConcreteJob_Set_RunDayOfWeek(SELF, 0)

/* "Sunday" */
#define CIM_ConcreteJob_Set_RunDayOfWeek_Sunday(SELF) \
    CIM_ConcreteJob_Set_RunDayOfWeek(SELF, 1)

/* "Monday" */
#define CIM_ConcreteJob_Set_RunDayOfWeek_Monday(SELF) \
    CIM_ConcreteJob_Set_RunDayOfWeek(SELF, 2)

/* "Tuesday" */
#define CIM_ConcreteJob_Set_RunDayOfWeek_Tuesday(SELF) \
    CIM_ConcreteJob_Set_RunDayOfWeek(SELF, 3)

/* "Wednesday" */
#define CIM_ConcreteJob_Set_RunDayOfWeek_Wednesday(SELF) \
    CIM_ConcreteJob_Set_RunDayOfWeek(SELF, 4)

/* "Thursday" */
#define CIM_ConcreteJob_Set_RunDayOfWeek_Thursday(SELF) \
    CIM_ConcreteJob_Set_RunDayOfWeek(SELF, 5)

/* "Friday" */
#define CIM_ConcreteJob_Set_RunDayOfWeek_Friday(SELF) \
    CIM_ConcreteJob_Set_RunDayOfWeek(SELF, 6)

/* "Saturday" */
#define CIM_ConcreteJob_Set_RunDayOfWeek_Saturday(SELF) \
    CIM_ConcreteJob_Set_RunDayOfWeek(SELF, 7)

KINLINE void CIM_ConcreteJob_Set_RunStartInterval(
    CIM_ConcreteJob* self,
    CMPIDateTime* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->RunStartInterval;
        KDateTime_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_RunStartInterval(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->RunStartInterval;
        KDateTime_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_RunStartInterval(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->RunStartInterval;
        KDateTime_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_Set_LocalOrUtcTime(
    CIM_ConcreteJob* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->LocalOrUtcTime;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_LocalOrUtcTime(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->LocalOrUtcTime;
        KUint16_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_LocalOrUtcTime(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->LocalOrUtcTime;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_ConcreteJob_LocalOrUtcTime_Enum
{
    CIM_ConcreteJob_LocalOrUtcTime_Local_Time = 1,
    CIM_ConcreteJob_LocalOrUtcTime_UTC_Time = 2,
}
CIM_ConcreteJob_LocalOrUtcTime_Enum;

/* "Local Time" */
#define CIM_ConcreteJob_Set_LocalOrUtcTime_Local_Time(SELF) \
    CIM_ConcreteJob_Set_LocalOrUtcTime(SELF, 1)

/* "UTC Time" */
#define CIM_ConcreteJob_Set_LocalOrUtcTime_UTC_Time(SELF) \
    CIM_ConcreteJob_Set_LocalOrUtcTime(SELF, 2)

KINLINE void CIM_ConcreteJob_Set_UntilTime(
    CIM_ConcreteJob* self,
    CMPIDateTime* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->UntilTime;
        KDateTime_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_UntilTime(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->UntilTime;
        KDateTime_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_UntilTime(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->UntilTime;
        KDateTime_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_SetString_Notify(
    CIM_ConcreteJob* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Notify;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Set_Notify(
    CIM_ConcreteJob* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Notify;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_ConcreteJob_Null_Notify(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Notify;
        KString_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_Notify(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Notify;
        KString_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_SetString_Owner(
    CIM_ConcreteJob* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Owner;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Set_Owner(
    CIM_ConcreteJob* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Owner;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_ConcreteJob_Null_Owner(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Owner;
        KString_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_Owner(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Owner;
        KString_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_Set_Priority(
    CIM_ConcreteJob* self,
    CMPIUint32 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint32* field = (KUint32*)&self->Priority;
        KUint32_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_Priority(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint32* field = (KUint32*)&self->Priority;
        KUint32_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_Priority(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint32* field = (KUint32*)&self->Priority;
        KUint32_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_Set_PercentComplete(
    CIM_ConcreteJob* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->PercentComplete;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_PercentComplete(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->PercentComplete;
        KUint16_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_PercentComplete(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->PercentComplete;
        KUint16_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_Set_DeleteOnCompletion(
    CIM_ConcreteJob* self,
    CMPIBoolean x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KBoolean* field = (KBoolean*)&self->DeleteOnCompletion;
        KBoolean_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_DeleteOnCompletion(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KBoolean* field = (KBoolean*)&self->DeleteOnCompletion;
        KBoolean_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_DeleteOnCompletion(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KBoolean* field = (KBoolean*)&self->DeleteOnCompletion;
        KBoolean_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_Set_ErrorCode(
    CIM_ConcreteJob* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->ErrorCode;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_ErrorCode(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->ErrorCode;
        KUint16_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_ErrorCode(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->ErrorCode;
        KUint16_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_SetString_ErrorDescription(
    CIM_ConcreteJob* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ErrorDescription;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Set_ErrorDescription(
    CIM_ConcreteJob* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ErrorDescription;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_ConcreteJob_Null_ErrorDescription(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ErrorDescription;
        KString_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_ErrorDescription(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ErrorDescription;
        KString_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_Set_RecoveryAction(
    CIM_ConcreteJob* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->RecoveryAction;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_RecoveryAction(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->RecoveryAction;
        KUint16_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_RecoveryAction(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->RecoveryAction;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_ConcreteJob_RecoveryAction_Enum
{
    CIM_ConcreteJob_RecoveryAction_Unknown = 0,
    CIM_ConcreteJob_RecoveryAction_Other = 1,
    CIM_ConcreteJob_RecoveryAction_Do_Not_Continue = 2,
    CIM_ConcreteJob_RecoveryAction_Continue_With_Next_Job = 3,
    CIM_ConcreteJob_RecoveryAction_Re_run_Job = 4,
    CIM_ConcreteJob_RecoveryAction_Run_Recovery_Job = 5,
}
CIM_ConcreteJob_RecoveryAction_Enum;

/* "Unknown" */
#define CIM_ConcreteJob_Set_RecoveryAction_Unknown(SELF) \
    CIM_ConcreteJob_Set_RecoveryAction(SELF, 0)

/* "Other" */
#define CIM_ConcreteJob_Set_RecoveryAction_Other(SELF) \
    CIM_ConcreteJob_Set_RecoveryAction(SELF, 1)

/* "Do Not Continue" */
#define CIM_ConcreteJob_Set_RecoveryAction_Do_Not_Continue(SELF) \
    CIM_ConcreteJob_Set_RecoveryAction(SELF, 2)

/* "Continue With Next Job" */
#define CIM_ConcreteJob_Set_RecoveryAction_Continue_With_Next_Job(SELF) \
    CIM_ConcreteJob_Set_RecoveryAction(SELF, 3)

/* "Re-run Job" */
#define CIM_ConcreteJob_Set_RecoveryAction_Re_run_Job(SELF) \
    CIM_ConcreteJob_Set_RecoveryAction(SELF, 4)

/* "Run Recovery Job" */
#define CIM_ConcreteJob_Set_RecoveryAction_Run_Recovery_Job(SELF) \
    CIM_ConcreteJob_Set_RecoveryAction(SELF, 5)

KINLINE void CIM_ConcreteJob_SetString_OtherRecoveryAction(
    CIM_ConcreteJob* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OtherRecoveryAction;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Set_OtherRecoveryAction(
    CIM_ConcreteJob* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OtherRecoveryAction;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_ConcreteJob_Null_OtherRecoveryAction(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OtherRecoveryAction;
        KString_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_OtherRecoveryAction(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OtherRecoveryAction;
        KString_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_Set_JobState(
    CIM_ConcreteJob* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->JobState;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_JobState(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->JobState;
        KUint16_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_JobState(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->JobState;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_ConcreteJob_JobState_Enum
{
    CIM_ConcreteJob_JobState_New = 2,
    CIM_ConcreteJob_JobState_Starting = 3,
    CIM_ConcreteJob_JobState_Running = 4,
    CIM_ConcreteJob_JobState_Suspended = 5,
    CIM_ConcreteJob_JobState_Shutting_Down = 6,
    CIM_ConcreteJob_JobState_Completed = 7,
    CIM_ConcreteJob_JobState_Terminated = 8,
    CIM_ConcreteJob_JobState_Killed = 9,
    CIM_ConcreteJob_JobState_Exception = 10,
    CIM_ConcreteJob_JobState_Service = 11,
    CIM_ConcreteJob_JobState_Query_Pending = 12,
    CIM_ConcreteJob_JobState_DMTF_Reserved = 13,
    CIM_ConcreteJob_JobState_Vendor_Reserved = 32768,
}
CIM_ConcreteJob_JobState_Enum;

/* "New" */
#define CIM_ConcreteJob_Set_JobState_New(SELF) \
    CIM_ConcreteJob_Set_JobState(SELF, 2)

/* "Starting" */
#define CIM_ConcreteJob_Set_JobState_Starting(SELF) \
    CIM_ConcreteJob_Set_JobState(SELF, 3)

/* "Running" */
#define CIM_ConcreteJob_Set_JobState_Running(SELF) \
    CIM_ConcreteJob_Set_JobState(SELF, 4)

/* "Suspended" */
#define CIM_ConcreteJob_Set_JobState_Suspended(SELF) \
    CIM_ConcreteJob_Set_JobState(SELF, 5)

/* "Shutting Down" */
#define CIM_ConcreteJob_Set_JobState_Shutting_Down(SELF) \
    CIM_ConcreteJob_Set_JobState(SELF, 6)

/* "Completed" */
#define CIM_ConcreteJob_Set_JobState_Completed(SELF) \
    CIM_ConcreteJob_Set_JobState(SELF, 7)

/* "Terminated" */
#define CIM_ConcreteJob_Set_JobState_Terminated(SELF) \
    CIM_ConcreteJob_Set_JobState(SELF, 8)

/* "Killed" */
#define CIM_ConcreteJob_Set_JobState_Killed(SELF) \
    CIM_ConcreteJob_Set_JobState(SELF, 9)

/* "Exception" */
#define CIM_ConcreteJob_Set_JobState_Exception(SELF) \
    CIM_ConcreteJob_Set_JobState(SELF, 10)

/* "Service" */
#define CIM_ConcreteJob_Set_JobState_Service(SELF) \
    CIM_ConcreteJob_Set_JobState(SELF, 11)

/* "Query Pending" */
#define CIM_ConcreteJob_Set_JobState_Query_Pending(SELF) \
    CIM_ConcreteJob_Set_JobState(SELF, 12)

/* "DMTF Reserved" */
#define CIM_ConcreteJob_Set_JobState_DMTF_Reserved(SELF) \
    CIM_ConcreteJob_Set_JobState(SELF, 13)

/* "Vendor Reserved" */
#define CIM_ConcreteJob_Set_JobState_Vendor_Reserved(SELF) \
    CIM_ConcreteJob_Set_JobState(SELF, 32768)

KINLINE void CIM_ConcreteJob_Set_TimeOfLastStateChange(
    CIM_ConcreteJob* self,
    CMPIDateTime* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->TimeOfLastStateChange;
        KDateTime_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_TimeOfLastStateChange(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->TimeOfLastStateChange;
        KDateTime_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_TimeOfLastStateChange(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->TimeOfLastStateChange;
        KDateTime_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_Set_TimeBeforeRemoval(
    CIM_ConcreteJob* self,
    CMPIDateTime* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->TimeBeforeRemoval;
        KDateTime_Set(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Null_TimeBeforeRemoval(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->TimeBeforeRemoval;
        KDateTime_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_TimeBeforeRemoval(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->TimeBeforeRemoval;
        KDateTime_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_SetString_JobInParameters(
    CIM_ConcreteJob* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->JobInParameters;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Set_JobInParameters(
    CIM_ConcreteJob* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->JobInParameters;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_ConcreteJob_Null_JobInParameters(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->JobInParameters;
        KString_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_JobInParameters(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->JobInParameters;
        KString_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_SetString_JobOutParameters(
    CIM_ConcreteJob* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->JobOutParameters;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Set_JobOutParameters(
    CIM_ConcreteJob* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->JobOutParameters;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_ConcreteJob_Null_JobOutParameters(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->JobOutParameters;
        KString_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_JobOutParameters(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->JobOutParameters;
        KString_Clr(field);
    }
}

KINLINE void CIM_ConcreteJob_SetString_MethodName(
    CIM_ConcreteJob* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->MethodName;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_ConcreteJob_Set_MethodName(
    CIM_ConcreteJob* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->MethodName;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_ConcreteJob_Null_MethodName(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->MethodName;
        KString_Null(field);
    }
}

KINLINE void CIM_ConcreteJob_Clr_MethodName(
    CIM_ConcreteJob* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->MethodName;
        KString_Clr(field);
    }
}

/* classname=CIM_ConcreteJob */
typedef struct _CIM_ConcreteJob_KillJob_Args
{
    KBase __base;
    /* IN */
    KBoolean DeleteOnKill;
}
CIM_ConcreteJob_KillJob_Args;

static const unsigned char __CIM_ConcreteJob_KillJob_Args_sig[] =
{
    0x07,0x4b,0x69,0x6c,0x6c,0x4a,0x6f,0x62,0x00,0x01,0x20,0x0c,0x44,0x65,0x6c,
    0x65,0x74,0x65,0x4f,0x6e,0x4b,0x69,0x6c,0x6c,0x00,
};

KINLINE void CIM_ConcreteJob_KillJob_Args_Init(
    CIM_ConcreteJob_KillJob_Args* self,
    const CMPIBroker* cb)
{
    const unsigned char* sig = __CIM_ConcreteJob_KillJob_Args_sig;
    KBase_Init(&self->__base, cb, sizeof(*self), sig, NULL);
}

KINLINE CMPIStatus CIM_ConcreteJob_KillJob_Args_InitFromArgs(
    CIM_ConcreteJob_KillJob_Args* self,
    const CMPIBroker* cb,
    const CMPIArgs* x,
    CMPIBoolean in,
    CMPIBoolean out)
{
    CIM_ConcreteJob_KillJob_Args_Init(self, cb);
    return KBase_FromArgs(&self->__base, x, in, out);
}

KINLINE CMPIArgs* CIM_ConcreteJob_KillJob_Args_ToArgs(
    const CIM_ConcreteJob_KillJob_Args* self,
    CMPIBoolean in,
    CMPIBoolean out,
    CMPIStatus* status)
{
    return KBase_ToArgs(&self->__base, in, out, status);
}

KINLINE CMPIStatus CIM_ConcreteJob_KillJob_Args_SetArgs(
    const CIM_ConcreteJob_KillJob_Args* self,
    CMPIBoolean in,
    CMPIBoolean out,
    CMPIArgs* ca)
{
    return KBase_SetToArgs(&self->__base, in, out, ca);
}

KINLINE void CIM_ConcreteJob_KillJob_Args_Print(
    const CIM_ConcreteJob_KillJob_Args* self,
    FILE* os)
{
    KBase_Print(os, &self->__base, 'a');
}

/* classname=CIM_ConcreteJob */
typedef struct _CIM_ConcreteJob_RequestStateChange_Args
{
    KBase __base;
    /* IN */
    KUint16 RequestedState;
    /* IN */
    KDateTime TimeoutPeriod;
}
CIM_ConcreteJob_RequestStateChange_Args;

static const unsigned char __CIM_ConcreteJob_RequestStateChange_Args_sig[] =
{
    0x12,0x52,0x65,0x71,0x75,0x65,0x73,0x74,0x53,0x74,0x61,0x74,0x65,0x43,0x68,
    0x61,0x6e,0x67,0x65,0x00,0x02,0x23,0x0e,0x52,0x65,0x71,0x75,0x65,0x73,0x74,
    0x65,0x64,0x53,0x74,0x61,0x74,0x65,0x00,0x2d,0x0d,0x54,0x69,0x6d,0x65,0x6f,
    0x75,0x74,0x50,0x65,0x72,0x69,0x6f,0x64,0x00,
};

KINLINE void CIM_ConcreteJob_RequestStateChange_Args_Init(
    CIM_ConcreteJob_RequestStateChange_Args* self,
    const CMPIBroker* cb)
{
    const unsigned char* sig = __CIM_ConcreteJob_RequestStateChange_Args_sig;
    KBase_Init(&self->__base, cb, sizeof(*self), sig, NULL);
}

KINLINE CMPIStatus CIM_ConcreteJob_RequestStateChange_Args_InitFromArgs(
    CIM_ConcreteJob_RequestStateChange_Args* self,
    const CMPIBroker* cb,
    const CMPIArgs* x,
    CMPIBoolean in,
    CMPIBoolean out)
{
    CIM_ConcreteJob_RequestStateChange_Args_Init(self, cb);
    return KBase_FromArgs(&self->__base, x, in, out);
}

KINLINE CMPIArgs* CIM_ConcreteJob_RequestStateChange_Args_ToArgs(
    const CIM_ConcreteJob_RequestStateChange_Args* self,
    CMPIBoolean in,
    CMPIBoolean out,
    CMPIStatus* status)
{
    return KBase_ToArgs(&self->__base, in, out, status);
}

KINLINE CMPIStatus CIM_ConcreteJob_RequestStateChange_Args_SetArgs(
    const CIM_ConcreteJob_RequestStateChange_Args* self,
    CMPIBoolean in,
    CMPIBoolean out,
    CMPIArgs* ca)
{
    return KBase_SetToArgs(&self->__base, in, out, ca);
}

KINLINE void CIM_ConcreteJob_RequestStateChange_Args_Print(
    const CIM_ConcreteJob_RequestStateChange_Args* self,
    FILE* os)
{
    KBase_Print(os, &self->__base, 'a');
}

/* classname=CIM_ConcreteJob */
typedef struct _CIM_ConcreteJob_GetError_Args
{
    KBase __base;
    /* IN OUT */
    KInstance Error;
}
CIM_ConcreteJob_GetError_Args;

static const unsigned char __CIM_ConcreteJob_GetError_Args_sig[] =
{
    0x08,0x47,0x65,0x74,0x45,0x72,0x72,0x6f,0x72,0x00,0x01,0x3c,0x05,0x45,0x72,
    0x72,0x6f,0x72,0x00,
};

KINLINE void CIM_ConcreteJob_GetError_Args_Init(
    CIM_ConcreteJob_GetError_Args* self,
    const CMPIBroker* cb)
{
    const unsigned char* sig = __CIM_ConcreteJob_GetError_Args_sig;
    KBase_Init(&self->__base, cb, sizeof(*self), sig, NULL);
}

KINLINE CMPIStatus CIM_ConcreteJob_GetError_Args_InitFromArgs(
    CIM_ConcreteJob_GetError_Args* self,
    const CMPIBroker* cb,
    const CMPIArgs* x,
    CMPIBoolean in,
    CMPIBoolean out)
{
    CIM_ConcreteJob_GetError_Args_Init(self, cb);
    return KBase_FromArgs(&self->__base, x, in, out);
}

KINLINE CMPIArgs* CIM_ConcreteJob_GetError_Args_ToArgs(
    const CIM_ConcreteJob_GetError_Args* self,
    CMPIBoolean in,
    CMPIBoolean out,
    CMPIStatus* status)
{
    return KBase_ToArgs(&self->__base, in, out, status);
}

KINLINE CMPIStatus CIM_ConcreteJob_GetError_Args_SetArgs(
    const CIM_ConcreteJob_GetError_Args* self,
    CMPIBoolean in,
    CMPIBoolean out,
    CMPIArgs* ca)
{
    return KBase_SetToArgs(&self->__base, in, out, ca);
}

KINLINE void CIM_ConcreteJob_GetError_Args_Print(
    const CIM_ConcreteJob_GetError_Args* self,
    FILE* os)
{
    KBase_Print(os, &self->__base, 'a');
}

/* classname=CIM_ConcreteJob */
typedef struct _CIM_ConcreteJob_GetErrors_Args
{
    KBase __base;
    /* IN OUT */
    KInstanceA Errors;
}
CIM_ConcreteJob_GetErrors_Args;

static const unsigned char __CIM_ConcreteJob_GetErrors_Args_sig[] =
{
    0x09,0x47,0x65,0x74,0x45,0x72,0x72,0x6f,0x72,0x73,0x00,0x01,0xbc,0x06,0x45,
    0x72,0x72,0x6f,0x72,0x73,0x00,
};

KINLINE void CIM_ConcreteJob_GetErrors_Args_Init(
    CIM_ConcreteJob_GetErrors_Args* self,
    const CMPIBroker* cb)
{
    const unsigned char* sig = __CIM_ConcreteJob_GetErrors_Args_sig;
    KBase_Init(&self->__base, cb, sizeof(*self), sig, NULL);
}

KINLINE CMPIStatus CIM_ConcreteJob_GetErrors_Args_InitFromArgs(
    CIM_ConcreteJob_GetErrors_Args* self,
    const CMPIBroker* cb,
    const CMPIArgs* x,
    CMPIBoolean in,
    CMPIBoolean out)
{
    CIM_ConcreteJob_GetErrors_Args_Init(self, cb);
    return KBase_FromArgs(&self->__base, x, in, out);
}

KINLINE CMPIArgs* CIM_ConcreteJob_GetErrors_Args_ToArgs(
    const CIM_ConcreteJob_GetErrors_Args* self,
    CMPIBoolean in,
    CMPIBoolean out,
    CMPIStatus* status)
{
    return KBase_ToArgs(&self->__base, in, out, status);
}

KINLINE CMPIStatus CIM_ConcreteJob_GetErrors_Args_SetArgs(
    const CIM_ConcreteJob_GetErrors_Args* self,
    CMPIBoolean in,
    CMPIBoolean out,
    CMPIArgs* ca)
{
    return KBase_SetToArgs(&self->__base, in, out, ca);
}

KINLINE void CIM_ConcreteJob_GetErrors_Args_Print(
    const CIM_ConcreteJob_GetErrors_Args* self,
    FILE* os)
{
    KBase_Print(os, &self->__base, 'a');
}

/*
**==============================================================================
**
** CIM_ConcreteJob methods
**
**==============================================================================
*/

KEXTERN KUint32 CIM_ConcreteJob_KillJob(
    const CMPIBroker* cb,
    CMPIMethodMI* mi,
    const CMPIContext* context,
    const CIM_ConcreteJobRef* self,
    const KBoolean* DeleteOnKill,
    CMPIStatus* status);

KEXTERN KUint32 CIM_ConcreteJob_RequestStateChange(
    const CMPIBroker* cb,
    CMPIMethodMI* mi,
    const CMPIContext* context,
    const CIM_ConcreteJobRef* self,
    const KUint16* RequestedState,
    const KDateTime* TimeoutPeriod,
    CMPIStatus* status);

KEXTERN KUint32 CIM_ConcreteJob_GetError(
    const CMPIBroker* cb,
    CMPIMethodMI* mi,
    const CMPIContext* context,
    const CIM_ConcreteJobRef* self,
    KInstance* Error,
    CMPIStatus* status);

KEXTERN KUint32 CIM_ConcreteJob_GetErrors(
    const CMPIBroker* cb,
    CMPIMethodMI* mi,
    const CMPIContext* context,
    const CIM_ConcreteJobRef* self,
    KInstanceA* Errors,
    CMPIStatus* status);

KINLINE CMPIStatus CIM_ConcreteJob_DispatchMethod(
    const CMPIBroker* cb,
    CMPIMethodMI* mi,
    const CMPIContext* cc,
    const CMPIResult* cr,
    const CMPIObjectPath* cop,
    const char* meth,
    const CMPIArgs* in,
    CMPIArgs* out)
{
    CIM_ConcreteJobRef self;

    KReturnIf(CIM_ConcreteJobRef_InitFromObjectPath(&self, cb, cop));

    if (strcasecmp(meth, "KillJob") == 0)
    {
        CMPIStatus st = KSTATUS_INIT;
        CIM_ConcreteJob_KillJob_Args args;
        KUint32 r;

        KReturnIf(CIM_ConcreteJob_KillJob_Args_InitFromArgs(
            &args, cb, in, 1, 0));

        r = CIM_ConcreteJob_KillJob(
            cb,
            mi,
            cc,
            &self,
            &args.DeleteOnKill,
            &st);

        if (!KOkay(st))
            return st;

        if (!r.exists)
            KReturn(ERR_FAILED);

        KReturnIf(CIM_ConcreteJob_KillJob_Args_SetArgs(
            &args, 0, 1, out));
        KReturnUint32Data(cr, &r);
        CMReturnDone(cr);

        KReturn(OK);
    }
    if (strcasecmp(meth, "RequestStateChange") == 0)
    {
        CMPIStatus st = KSTATUS_INIT;
        CIM_ConcreteJob_RequestStateChange_Args args;
        KUint32 r;

        KReturnIf(CIM_ConcreteJob_RequestStateChange_Args_InitFromArgs(
            &args, cb, in, 1, 0));

        r = CIM_ConcreteJob_RequestStateChange(
            cb,
            mi,
            cc,
            &self,
            &args.RequestedState,
            &args.TimeoutPeriod,
            &st);

        if (!KOkay(st))
            return st;

        if (!r.exists)
            KReturn(ERR_FAILED);

        KReturnIf(CIM_ConcreteJob_RequestStateChange_Args_SetArgs(
            &args, 0, 1, out));
        KReturnUint32Data(cr, &r);
        CMReturnDone(cr);

        KReturn(OK);
    }
    if (strcasecmp(meth, "GetError") == 0)
    {
        CMPIStatus st = KSTATUS_INIT;
        CIM_ConcreteJob_GetError_Args args;
        KUint32 r;

        KReturnIf(CIM_ConcreteJob_GetError_Args_InitFromArgs(
            &args, cb, in, 1, 0));

        r = CIM_ConcreteJob_GetError(
            cb,
            mi,
            cc,
            &self,
            &args.Error,
            &st);

        if (!KOkay(st))
            return st;

        if (!r.exists)
            KReturn(ERR_FAILED);

        KReturnIf(CIM_ConcreteJob_GetError_Args_SetArgs(
            &args, 0, 1, out));
        KReturnUint32Data(cr, &r);
        CMReturnDone(cr);

        KReturn(OK);
    }
    if (strcasecmp(meth, "GetErrors") == 0)
    {
        CMPIStatus st = KSTATUS_INIT;
        CIM_ConcreteJob_GetErrors_Args args;
        KUint32 r;

        KReturnIf(CIM_ConcreteJob_GetErrors_Args_InitFromArgs(
            &args, cb, in, 1, 0));

        r = CIM_ConcreteJob_GetErrors(
            cb,
            mi,
            cc,
            &self,
            &args.Errors,
            &st);

        if (!KOkay(st))
            return st;

        if (!r.exists)
            KReturn(ERR_FAILED);

        KReturnIf(CIM_ConcreteJob_GetErrors_Args_SetArgs(
            &args, 0, 1, out));
        KReturnUint32Data(cr, &r);
        CMReturnDone(cr);

        KReturn(OK);
    }

    KReturn(ERR_METHOD_NOT_FOUND);
}

#define CIM_ConcreteJob_ClassName "CIM_ConcreteJob"

#endif /* _konkrete_CIM_ConcreteJob_h */
