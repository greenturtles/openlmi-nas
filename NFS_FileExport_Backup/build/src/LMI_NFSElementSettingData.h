/*
**==============================================================================
**
** CAUTION: This file generated by KonkretCMPI. Please do not edit.
**
**==============================================================================
*/

#ifndef _konkrete_LMI_NFSElementSettingData_h
#define _konkrete_LMI_NFSElementSettingData_h

#include <konkret/konkret.h>

#include <strings.h>
#include "LMI_NFS_Share.h"
#include "LMI_ExportedFileShareSetting.h"

/*
**==============================================================================
**
** struct LMI_NFSElementSettingDataRef 
**
**==============================================================================
*/

/* classname=LMI_NFSElementSettingData */
typedef struct _LMI_NFSElementSettingDataRef
{
    KBase __base;
    /* LMI_NFSElementSettingData features */
    const KRef Share; /* LMI_NFS_Share */
    const KRef ShareSetting; /* LMI_ExportedFileShareSetting */
}
LMI_NFSElementSettingDataRef;

static const unsigned char __LMI_NFSElementSettingDataRef_sig[] =
{
    0x19,0x4c,0x4d,0x49,0x5f,0x4e,0x46,0x53,0x45,0x6c,0x65,0x6d,0x65,0x6e,0x74,
    0x53,0x65,0x74,0x74,0x69,0x6e,0x67,0x44,0x61,0x74,0x61,0x00,0x02,0x4e,0x05,
    0x53,0x68,0x61,0x72,0x65,0x00,0x4e,0x0c,0x53,0x68,0x61,0x72,0x65,0x53,0x65,
    0x74,0x74,0x69,0x6e,0x67,0x00,
};

KINLINE void LMI_NFSElementSettingDataRef_Init(
    LMI_NFSElementSettingDataRef* self,
    const CMPIBroker* cb,
    const char* ns)
{
    const unsigned char* sig = __LMI_NFSElementSettingDataRef_sig;
    KBase_Init(&self->__base, cb, sizeof(*self), sig, ns);
    ((KRef*)&self->Share)->__sig = __LMI_NFS_Share_sig;
    ((KRef*)&self->ShareSetting)->__sig = __LMI_ExportedFileShareSetting_sig;
}

KINLINE CMPIStatus LMI_NFSElementSettingDataRef_InitFromInstance(
    LMI_NFSElementSettingDataRef* self,
    const CMPIBroker* cb,
    const CMPIInstance* x)
{
    LMI_NFSElementSettingDataRef_Init(self, cb, NULL);
    return KBase_FromInstance(&self->__base, x);
}

KINLINE CMPIStatus LMI_NFSElementSettingDataRef_InitFromObjectPath(
    LMI_NFSElementSettingDataRef* self,
    const CMPIBroker* cb,
    const CMPIObjectPath* x)
{
    LMI_NFSElementSettingDataRef_Init(self, cb, NULL);
    return KBase_FromObjectPath(&self->__base, x);
}

KINLINE void LMI_NFSElementSettingDataRef_Print(
    const LMI_NFSElementSettingDataRef* self,
    FILE* os)
{
    KBase_Print(os, &self->__base, 'r');
}

KINLINE CMPIInstance* LMI_NFSElementSettingDataRef_ToInstance(
    const LMI_NFSElementSettingDataRef* self,
    CMPIStatus* status)
{
    return KBase_ToInstance(&self->__base, status);
}

KINLINE CMPIObjectPath* LMI_NFSElementSettingDataRef_ToObjectPath(
    const LMI_NFSElementSettingDataRef* self,
    CMPIStatus* status)
{
    return KBase_ToObjectPath(&self->__base, status);
}

KINLINE const char* LMI_NFSElementSettingDataRef_NameSpace(
    LMI_NFSElementSettingDataRef* self)
{
    if (self && self->__base.magic == KMAGIC)
        return self->__base.ns ? KChars(self->__base.ns) : NULL;
    return NULL;
}

KINLINE void LMI_NFSElementSettingDataRef_SetObjectPath_Share(
    LMI_NFSElementSettingDataRef* self,
    const CMPIObjectPath* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KRef* field = (KRef*)&self->Share;
        KRef_SetObjectPath(field, x);
    }
}

KINLINE CMPIStatus LMI_NFSElementSettingDataRef_Set_Share(
    LMI_NFSElementSettingDataRef* self,
    const LMI_NFS_ShareRef* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KRef* field = (KRef*)&self->Share;
        return KRef_Set(field, &x->__base);
    }
    CMReturn(CMPI_RC_ERR_FAILED);
}

KINLINE void LMI_NFSElementSettingDataRef_Null_Share(
    LMI_NFSElementSettingDataRef* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KRef* field = (KRef*)&self->Share;
        KRef_Null(field);
    }
}

KINLINE void LMI_NFSElementSettingDataRef_Clr_Share(
    LMI_NFSElementSettingDataRef* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KRef* field = (KRef*)&self->Share;
        KRef_Clr(field);
    }
}

KINLINE void LMI_NFSElementSettingDataRef_SetObjectPath_ShareSetting(
    LMI_NFSElementSettingDataRef* self,
    const CMPIObjectPath* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KRef* field = (KRef*)&self->ShareSetting;
        KRef_SetObjectPath(field, x);
    }
}

KINLINE CMPIStatus LMI_NFSElementSettingDataRef_Set_ShareSetting(
    LMI_NFSElementSettingDataRef* self,
    const LMI_ExportedFileShareSettingRef* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KRef* field = (KRef*)&self->ShareSetting;
        return KRef_Set(field, &x->__base);
    }
    CMReturn(CMPI_RC_ERR_FAILED);
}

KINLINE void LMI_NFSElementSettingDataRef_Null_ShareSetting(
    LMI_NFSElementSettingDataRef* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KRef* field = (KRef*)&self->ShareSetting;
        KRef_Null(field);
    }
}

KINLINE void LMI_NFSElementSettingDataRef_Clr_ShareSetting(
    LMI_NFSElementSettingDataRef* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KRef* field = (KRef*)&self->ShareSetting;
        KRef_Clr(field);
    }
}

/*
**==============================================================================
**
** struct LMI_NFSElementSettingData 
**
**==============================================================================
*/

/* classname=LMI_NFSElementSettingData */
typedef struct _LMI_NFSElementSettingData
{
    KBase __base;
    /* LMI_NFSElementSettingData features */
    const KRef Share; /* LMI_NFS_Share */
    const KRef ShareSetting; /* LMI_ExportedFileShareSetting */
}
LMI_NFSElementSettingData;

static const unsigned char __LMI_NFSElementSettingData_sig[] =
{
    0x19,0x4c,0x4d,0x49,0x5f,0x4e,0x46,0x53,0x45,0x6c,0x65,0x6d,0x65,0x6e,0x74,
    0x53,0x65,0x74,0x74,0x69,0x6e,0x67,0x44,0x61,0x74,0x61,0x00,0x02,0x4e,0x05,
    0x53,0x68,0x61,0x72,0x65,0x00,0x4e,0x0c,0x53,0x68,0x61,0x72,0x65,0x53,0x65,
    0x74,0x74,0x69,0x6e,0x67,0x00,
};

KINLINE void LMI_NFSElementSettingData_Init(
    LMI_NFSElementSettingData* self,
    const CMPIBroker* cb,
    const char* ns)
{
    const unsigned char* sig = __LMI_NFSElementSettingData_sig;
    KBase_Init(&self->__base, cb, sizeof(*self), sig, ns);
    ((KRef*)&self->Share)->__sig = __LMI_NFS_Share_sig;
    ((KRef*)&self->ShareSetting)->__sig = __LMI_ExportedFileShareSetting_sig;
}

KINLINE CMPIStatus LMI_NFSElementSettingData_InitFromInstance(
    LMI_NFSElementSettingData* self,
    const CMPIBroker* cb,
    const CMPIInstance* x)
{
    LMI_NFSElementSettingData_Init(self, cb, NULL);
    return KBase_FromInstance(&self->__base, x);
}

KINLINE CMPIStatus LMI_NFSElementSettingData_InitFromObjectPath(
    LMI_NFSElementSettingData* self,
    const CMPIBroker* cb,
    const CMPIObjectPath* x)
{
    LMI_NFSElementSettingData_Init(self, cb, NULL);
    return KBase_FromObjectPath(&self->__base, x);
}

KINLINE void LMI_NFSElementSettingData_Print(
    const LMI_NFSElementSettingData* self,
    FILE* os)
{
    KBase_Print(os, &self->__base, 'i');
}

KINLINE CMPIInstance* LMI_NFSElementSettingData_ToInstance(
    const LMI_NFSElementSettingData* self,
    CMPIStatus* status)
{
    return KBase_ToInstance(&self->__base, status);
}

KINLINE CMPIObjectPath* LMI_NFSElementSettingData_ToObjectPath(
    const LMI_NFSElementSettingData* self,
    CMPIStatus* status)
{
    return KBase_ToObjectPath(&self->__base, status);
}

KINLINE const char* LMI_NFSElementSettingData_NameSpace(
    LMI_NFSElementSettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
        return self->__base.ns ? KChars(self->__base.ns) : NULL;
    return NULL;
}

KINLINE void LMI_NFSElementSettingData_SetObjectPath_Share(
    LMI_NFSElementSettingData* self,
    const CMPIObjectPath* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KRef* field = (KRef*)&self->Share;
        KRef_SetObjectPath(field, x);
    }
}

KINLINE CMPIStatus LMI_NFSElementSettingData_Set_Share(
    LMI_NFSElementSettingData* self,
    const LMI_NFS_ShareRef* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KRef* field = (KRef*)&self->Share;
        return KRef_Set(field, &x->__base);
    }
    CMReturn(CMPI_RC_ERR_FAILED);
}

KINLINE void LMI_NFSElementSettingData_Null_Share(
    LMI_NFSElementSettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KRef* field = (KRef*)&self->Share;
        KRef_Null(field);
    }
}

KINLINE void LMI_NFSElementSettingData_Clr_Share(
    LMI_NFSElementSettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KRef* field = (KRef*)&self->Share;
        KRef_Clr(field);
    }
}

KINLINE void LMI_NFSElementSettingData_SetObjectPath_ShareSetting(
    LMI_NFSElementSettingData* self,
    const CMPIObjectPath* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KRef* field = (KRef*)&self->ShareSetting;
        KRef_SetObjectPath(field, x);
    }
}

KINLINE CMPIStatus LMI_NFSElementSettingData_Set_ShareSetting(
    LMI_NFSElementSettingData* self,
    const LMI_ExportedFileShareSettingRef* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KRef* field = (KRef*)&self->ShareSetting;
        return KRef_Set(field, &x->__base);
    }
    CMReturn(CMPI_RC_ERR_FAILED);
}

KINLINE void LMI_NFSElementSettingData_Null_ShareSetting(
    LMI_NFSElementSettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KRef* field = (KRef*)&self->ShareSetting;
        KRef_Null(field);
    }
}

KINLINE void LMI_NFSElementSettingData_Clr_ShareSetting(
    LMI_NFSElementSettingData* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KRef* field = (KRef*)&self->ShareSetting;
        KRef_Clr(field);
    }
}

/*
**==============================================================================
**
** LMI_NFSElementSettingData methods
**
**==============================================================================
*/

KINLINE CMPIStatus LMI_NFSElementSettingData_DispatchMethod(
    const CMPIBroker* cb,
    CMPIMethodMI* mi,
    const CMPIContext* cc,
    const CMPIResult* cr,
    const CMPIObjectPath* cop,
    const char* meth,
    const CMPIArgs* in,
    CMPIArgs* out)
{
    LMI_NFSElementSettingDataRef self;

    KReturnIf(LMI_NFSElementSettingDataRef_InitFromObjectPath(&self, cb, cop));


    KReturn(ERR_METHOD_NOT_FOUND);
}

#define LMI_NFSElementSettingData_ClassName "LMI_NFSElementSettingData"

#endif /* _konkrete_LMI_NFSElementSettingData_h */
