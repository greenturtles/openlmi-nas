/*
**==============================================================================
**
** CAUTION: This file generated by KonkretCMPI. Please do not edit.
**
**==============================================================================
*/

#ifndef _konkrete_CIM_EnabledLogicalElement_h
#define _konkrete_CIM_EnabledLogicalElement_h

#include <konkret/konkret.h>

#include <strings.h>
#include "CIM_ConcreteJob.h"

/*
**==============================================================================
**
** struct CIM_EnabledLogicalElementRef 
**
**==============================================================================
*/

/* classname=CIM_EnabledLogicalElement */
typedef struct _CIM_EnabledLogicalElementRef
{
    KBase __base;
    /* CIM_ManagedElement features */
    /* CIM_ManagedSystemElement features */
    /* CIM_LogicalElement features */
    /* CIM_EnabledLogicalElement features */
}
CIM_EnabledLogicalElementRef;

static const unsigned char __CIM_EnabledLogicalElementRef_sig[] =
{
    0x19,0x43,0x49,0x4d,0x5f,0x45,0x6e,0x61,0x62,0x6c,0x65,0x64,0x4c,0x6f,0x67,
    0x69,0x63,0x61,0x6c,0x45,0x6c,0x65,0x6d,0x65,0x6e,0x74,0x00,0x00,
};

KINLINE void CIM_EnabledLogicalElementRef_Init(
    CIM_EnabledLogicalElementRef* self,
    const CMPIBroker* cb,
    const char* ns)
{
    const unsigned char* sig = __CIM_EnabledLogicalElementRef_sig;
    KBase_Init(&self->__base, cb, sizeof(*self), sig, ns);
}

KINLINE CMPIStatus CIM_EnabledLogicalElementRef_InitFromInstance(
    CIM_EnabledLogicalElementRef* self,
    const CMPIBroker* cb,
    const CMPIInstance* x)
{
    CIM_EnabledLogicalElementRef_Init(self, cb, NULL);
    return KBase_FromInstance(&self->__base, x);
}

KINLINE CMPIStatus CIM_EnabledLogicalElementRef_InitFromObjectPath(
    CIM_EnabledLogicalElementRef* self,
    const CMPIBroker* cb,
    const CMPIObjectPath* x)
{
    CIM_EnabledLogicalElementRef_Init(self, cb, NULL);
    return KBase_FromObjectPath(&self->__base, x);
}

KINLINE void CIM_EnabledLogicalElementRef_Print(
    const CIM_EnabledLogicalElementRef* self,
    FILE* os)
{
    KBase_Print(os, &self->__base, 'r');
}

KINLINE CMPIInstance* CIM_EnabledLogicalElementRef_ToInstance(
    const CIM_EnabledLogicalElementRef* self,
    CMPIStatus* status)
{
    return KBase_ToInstance(&self->__base, status);
}

KINLINE CMPIObjectPath* CIM_EnabledLogicalElementRef_ToObjectPath(
    const CIM_EnabledLogicalElementRef* self,
    CMPIStatus* status)
{
    return KBase_ToObjectPath(&self->__base, status);
}

KINLINE const char* CIM_EnabledLogicalElementRef_NameSpace(
    CIM_EnabledLogicalElementRef* self)
{
    if (self && self->__base.magic == KMAGIC)
        return self->__base.ns ? KChars(self->__base.ns) : NULL;
    return NULL;
}

/*
**==============================================================================
**
** struct CIM_EnabledLogicalElement 
**
**==============================================================================
*/

/* classname=CIM_EnabledLogicalElement */
typedef struct _CIM_EnabledLogicalElement
{
    KBase __base;
    /* CIM_ManagedElement features */
    const KString InstanceID;
    const KString Caption;
    const KString Description;
    const KString ElementName;
    const KUint64 Generation;
    /* CIM_ManagedSystemElement features */
    const KDateTime InstallDate;
    const KString Name;
    const KUint16A OperationalStatus;
    const KStringA StatusDescriptions;
    const KString Status;
    const KUint16 HealthState;
    const KUint16 CommunicationStatus;
    const KUint16 DetailedStatus;
    const KUint16 OperatingStatus;
    const KUint16 PrimaryStatus;
    /* CIM_LogicalElement features */
    /* CIM_EnabledLogicalElement features */
    const KUint16 EnabledState;
    const KString OtherEnabledState;
    const KUint16 RequestedState;
    const KUint16 EnabledDefault;
    const KDateTime TimeOfLastStateChange;
    const KUint16A AvailableRequestedStates;
    const KUint16 TransitioningToState;
}
CIM_EnabledLogicalElement;

static const unsigned char __CIM_EnabledLogicalElement_sig[] =
{
    0x19,0x43,0x49,0x4d,0x5f,0x45,0x6e,0x61,0x62,0x6c,0x65,0x64,0x4c,0x6f,0x67,
    0x69,0x63,0x61,0x6c,0x45,0x6c,0x65,0x6d,0x65,0x6e,0x74,0x00,0x16,0x0c,0x0a,
    0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x44,0x00,0x0c,0x07,0x43,0x61,
    0x70,0x74,0x69,0x6f,0x6e,0x00,0x0c,0x0b,0x44,0x65,0x73,0x63,0x72,0x69,0x70,
    0x74,0x69,0x6f,0x6e,0x00,0x0c,0x0b,0x45,0x6c,0x65,0x6d,0x65,0x6e,0x74,0x4e,
    0x61,0x6d,0x65,0x00,0x07,0x0a,0x47,0x65,0x6e,0x65,0x72,0x61,0x74,0x69,0x6f,
    0x6e,0x00,0x0d,0x0b,0x49,0x6e,0x73,0x74,0x61,0x6c,0x6c,0x44,0x61,0x74,0x65,
    0x00,0x0c,0x04,0x4e,0x61,0x6d,0x65,0x00,0x83,0x11,0x4f,0x70,0x65,0x72,0x61,
    0x74,0x69,0x6f,0x6e,0x61,0x6c,0x53,0x74,0x61,0x74,0x75,0x73,0x00,0x8c,0x12,
    0x53,0x74,0x61,0x74,0x75,0x73,0x44,0x65,0x73,0x63,0x72,0x69,0x70,0x74,0x69,
    0x6f,0x6e,0x73,0x00,0x0c,0x06,0x53,0x74,0x61,0x74,0x75,0x73,0x00,0x03,0x0b,
    0x48,0x65,0x61,0x6c,0x74,0x68,0x53,0x74,0x61,0x74,0x65,0x00,0x03,0x13,0x43,
    0x6f,0x6d,0x6d,0x75,0x6e,0x69,0x63,0x61,0x74,0x69,0x6f,0x6e,0x53,0x74,0x61,
    0x74,0x75,0x73,0x00,0x03,0x0e,0x44,0x65,0x74,0x61,0x69,0x6c,0x65,0x64,0x53,
    0x74,0x61,0x74,0x75,0x73,0x00,0x03,0x0f,0x4f,0x70,0x65,0x72,0x61,0x74,0x69,
    0x6e,0x67,0x53,0x74,0x61,0x74,0x75,0x73,0x00,0x03,0x0d,0x50,0x72,0x69,0x6d,
    0x61,0x72,0x79,0x53,0x74,0x61,0x74,0x75,0x73,0x00,0x03,0x0c,0x45,0x6e,0x61,
    0x62,0x6c,0x65,0x64,0x53,0x74,0x61,0x74,0x65,0x00,0x0c,0x11,0x4f,0x74,0x68,
    0x65,0x72,0x45,0x6e,0x61,0x62,0x6c,0x65,0x64,0x53,0x74,0x61,0x74,0x65,0x00,
    0x03,0x0e,0x52,0x65,0x71,0x75,0x65,0x73,0x74,0x65,0x64,0x53,0x74,0x61,0x74,
    0x65,0x00,0x03,0x0e,0x45,0x6e,0x61,0x62,0x6c,0x65,0x64,0x44,0x65,0x66,0x61,
    0x75,0x6c,0x74,0x00,0x0d,0x15,0x54,0x69,0x6d,0x65,0x4f,0x66,0x4c,0x61,0x73,
    0x74,0x53,0x74,0x61,0x74,0x65,0x43,0x68,0x61,0x6e,0x67,0x65,0x00,0x83,0x18,
    0x41,0x76,0x61,0x69,0x6c,0x61,0x62,0x6c,0x65,0x52,0x65,0x71,0x75,0x65,0x73,
    0x74,0x65,0x64,0x53,0x74,0x61,0x74,0x65,0x73,0x00,0x03,0x14,0x54,0x72,0x61,
    0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x69,0x6e,0x67,0x54,0x6f,0x53,0x74,0x61,
    0x74,0x65,0x00,
};

KINLINE void CIM_EnabledLogicalElement_Init(
    CIM_EnabledLogicalElement* self,
    const CMPIBroker* cb,
    const char* ns)
{
    const unsigned char* sig = __CIM_EnabledLogicalElement_sig;
    KBase_Init(&self->__base, cb, sizeof(*self), sig, ns);
}

KINLINE CMPIStatus CIM_EnabledLogicalElement_InitFromInstance(
    CIM_EnabledLogicalElement* self,
    const CMPIBroker* cb,
    const CMPIInstance* x)
{
    CIM_EnabledLogicalElement_Init(self, cb, NULL);
    return KBase_FromInstance(&self->__base, x);
}

KINLINE CMPIStatus CIM_EnabledLogicalElement_InitFromObjectPath(
    CIM_EnabledLogicalElement* self,
    const CMPIBroker* cb,
    const CMPIObjectPath* x)
{
    CIM_EnabledLogicalElement_Init(self, cb, NULL);
    return KBase_FromObjectPath(&self->__base, x);
}

KINLINE void CIM_EnabledLogicalElement_Print(
    const CIM_EnabledLogicalElement* self,
    FILE* os)
{
    KBase_Print(os, &self->__base, 'i');
}

KINLINE CMPIInstance* CIM_EnabledLogicalElement_ToInstance(
    const CIM_EnabledLogicalElement* self,
    CMPIStatus* status)
{
    return KBase_ToInstance(&self->__base, status);
}

KINLINE CMPIObjectPath* CIM_EnabledLogicalElement_ToObjectPath(
    const CIM_EnabledLogicalElement* self,
    CMPIStatus* status)
{
    return KBase_ToObjectPath(&self->__base, status);
}

KINLINE const char* CIM_EnabledLogicalElement_NameSpace(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
        return self->__base.ns ? KChars(self->__base.ns) : NULL;
    return NULL;
}

KINLINE void CIM_EnabledLogicalElement_SetString_InstanceID(
    CIM_EnabledLogicalElement* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_EnabledLogicalElement_Set_InstanceID(
    CIM_EnabledLogicalElement* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_EnabledLogicalElement_Null_InstanceID(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_Null(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Clr_InstanceID(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->InstanceID;
        KString_Clr(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_SetString_Caption(
    CIM_EnabledLogicalElement* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Caption;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_EnabledLogicalElement_Set_Caption(
    CIM_EnabledLogicalElement* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Caption;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_EnabledLogicalElement_Null_Caption(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Caption;
        KString_Null(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Clr_Caption(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Caption;
        KString_Clr(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_SetString_Description(
    CIM_EnabledLogicalElement* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Description;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_EnabledLogicalElement_Set_Description(
    CIM_EnabledLogicalElement* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Description;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_EnabledLogicalElement_Null_Description(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Description;
        KString_Null(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Clr_Description(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Description;
        KString_Clr(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_SetString_ElementName(
    CIM_EnabledLogicalElement* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ElementName;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_EnabledLogicalElement_Set_ElementName(
    CIM_EnabledLogicalElement* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ElementName;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_EnabledLogicalElement_Null_ElementName(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ElementName;
        KString_Null(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Clr_ElementName(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->ElementName;
        KString_Clr(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Set_Generation(
    CIM_EnabledLogicalElement* self,
    CMPIUint64 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint64* field = (KUint64*)&self->Generation;
        KUint64_Set(field, x);
    }
}

KINLINE void CIM_EnabledLogicalElement_Null_Generation(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint64* field = (KUint64*)&self->Generation;
        KUint64_Null(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Clr_Generation(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint64* field = (KUint64*)&self->Generation;
        KUint64_Clr(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Set_InstallDate(
    CIM_EnabledLogicalElement* self,
    CMPIDateTime* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->InstallDate;
        KDateTime_Set(field, x);
    }
}

KINLINE void CIM_EnabledLogicalElement_Null_InstallDate(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->InstallDate;
        KDateTime_Null(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Clr_InstallDate(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->InstallDate;
        KDateTime_Clr(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_SetString_Name(
    CIM_EnabledLogicalElement* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Name;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_EnabledLogicalElement_Set_Name(
    CIM_EnabledLogicalElement* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Name;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_EnabledLogicalElement_Null_Name(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Name;
        KString_Null(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Clr_Name(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Name;
        KString_Clr(field);
    }
}

KINLINE CMPIBoolean CIM_EnabledLogicalElement_Init_OperationalStatus(
    CIM_EnabledLogicalElement* self,
    CMPICount count)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16A* field = (KUint16A*)&self->OperationalStatus;
        return KUint16A_Init(field, self->__base.cb, count);
    }
    return 0;
}

KINLINE void CIM_EnabledLogicalElement_InitNull_OperationalStatus(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16A* field = (KUint16A*)&self->OperationalStatus;
        KUint16A_InitNull(field);
    }
}

KINLINE CMPIBoolean CIM_EnabledLogicalElement_Set_OperationalStatus(
    CIM_EnabledLogicalElement* self,
    CMPICount i,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16A* field = (KUint16A*)&self->OperationalStatus;
        return KUint16A_Set(field, i, x);
    }
    return 0;
}

KINLINE KUint16 CIM_EnabledLogicalElement_Get_OperationalStatus(
    CIM_EnabledLogicalElement* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16A* field = (KUint16A*)&self->OperationalStatus;
        return KUint16A_Get(field, i);
    }
    return KUint16A_Get(NULL, 0);
}

KINLINE CMPIBoolean CIM_EnabledLogicalElement_Null_OperationalStatus(
    CIM_EnabledLogicalElement* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16A* field = (KUint16A*)&self->OperationalStatus;
        return KUint16A_Null(field, i);
    }
    return 0;
}

KINLINE void CIM_EnabledLogicalElement_Clr_OperationalStatus(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16A* field = (KUint16A*)&self->OperationalStatus;
        KUint16A_Clr(field);
    }
}

typedef enum _CIM_EnabledLogicalElement_OperationalStatus_Enum
{
    CIM_EnabledLogicalElement_OperationalStatus_Unknown = 0,
    CIM_EnabledLogicalElement_OperationalStatus_Other = 1,
    CIM_EnabledLogicalElement_OperationalStatus_OK = 2,
    CIM_EnabledLogicalElement_OperationalStatus_Degraded = 3,
    CIM_EnabledLogicalElement_OperationalStatus_Stressed = 4,
    CIM_EnabledLogicalElement_OperationalStatus_Predictive_Failure = 5,
    CIM_EnabledLogicalElement_OperationalStatus_Error = 6,
    CIM_EnabledLogicalElement_OperationalStatus_Non_Recoverable_Error = 7,
    CIM_EnabledLogicalElement_OperationalStatus_Starting = 8,
    CIM_EnabledLogicalElement_OperationalStatus_Stopping = 9,
    CIM_EnabledLogicalElement_OperationalStatus_Stopped = 10,
    CIM_EnabledLogicalElement_OperationalStatus_In_Service = 11,
    CIM_EnabledLogicalElement_OperationalStatus_No_Contact = 12,
    CIM_EnabledLogicalElement_OperationalStatus_Lost_Communication = 13,
    CIM_EnabledLogicalElement_OperationalStatus_Aborted = 14,
    CIM_EnabledLogicalElement_OperationalStatus_Dormant = 15,
    CIM_EnabledLogicalElement_OperationalStatus_Supporting_Entity_in_Error = 16,
    CIM_EnabledLogicalElement_OperationalStatus_Completed = 17,
    CIM_EnabledLogicalElement_OperationalStatus_Power_Mode = 18,
    CIM_EnabledLogicalElement_OperationalStatus_Relocating = 19,
    CIM_EnabledLogicalElement_OperationalStatus_DMTF_Reserved = 0,
    CIM_EnabledLogicalElement_OperationalStatus_Vendor_Reserved = 0,
}
CIM_EnabledLogicalElement_OperationalStatus_Enum;

/* "Unknown" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_Unknown(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 0)

/* "Other" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_Other(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 1)

/* "OK" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_OK(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 2)

/* "Degraded" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_Degraded(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 3)

/* "Stressed" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_Stressed(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 4)

/* "Predictive Failure" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_Predictive_Failure(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 5)

/* "Error" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_Error(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 6)

/* "Non-Recoverable Error" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_Non_Recoverable_Error(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 7)

/* "Starting" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_Starting(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 8)

/* "Stopping" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_Stopping(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 9)

/* "Stopped" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_Stopped(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 10)

/* "In Service" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_In_Service(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 11)

/* "No Contact" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_No_Contact(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 12)

/* "Lost Communication" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_Lost_Communication(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 13)

/* "Aborted" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_Aborted(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 14)

/* "Dormant" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_Dormant(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 15)

/* "Supporting Entity in Error" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_Supporting_Entity_in_Error(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 16)

/* "Completed" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_Completed(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 17)

/* "Power Mode" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_Power_Mode(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 18)

/* "Relocating" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_Relocating(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 19)

/* "DMTF Reserved" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_DMTF_Reserved(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 0)

/* "Vendor Reserved" */
#define CIM_EnabledLogicalElement_Set_OperationalStatus_Vendor_Reserved(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_OperationalStatus(SELF, INDEX, 0)

KINLINE CMPIBoolean CIM_EnabledLogicalElement_Init_StatusDescriptions(
    CIM_EnabledLogicalElement* self,
    CMPICount count)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->StatusDescriptions;
        return KStringA_Init(field, self->__base.cb, count);
    }
    return 0;
}

KINLINE void CIM_EnabledLogicalElement_InitNull_StatusDescriptions(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->StatusDescriptions;
        KStringA_InitNull(field);
    }
}

KINLINE CMPIBoolean CIM_EnabledLogicalElement_SetString_StatusDescriptions(
    CIM_EnabledLogicalElement* self,
    CMPICount i,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->StatusDescriptions;
        return KStringA_SetString(field, i, x);
    }
    return 0;
}

KINLINE CMPIBoolean CIM_EnabledLogicalElement_Set_StatusDescriptions(
    CIM_EnabledLogicalElement* self,
    CMPICount i,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->StatusDescriptions;
        return KStringA_Set(field, self->__base.cb, i, s);
    }
    return 0;
}

KINLINE KString CIM_EnabledLogicalElement_GetString_StatusDescriptions(
    CIM_EnabledLogicalElement* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->StatusDescriptions;
        return KStringA_GetString(field, i);
    }
    return KStringA_GetString(NULL, 0);
}

KINLINE const char* CIM_EnabledLogicalElement_Get_StatusDescriptions(
    CIM_EnabledLogicalElement* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->StatusDescriptions;
        return KStringA_Get(field, i);
    }
    return NULL;
}

KINLINE CMPIBoolean CIM_EnabledLogicalElement_Null_StatusDescriptions(
    CIM_EnabledLogicalElement* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->StatusDescriptions;
        return KStringA_Null(field, i);
    }
    return 0;
}

KINLINE void CIM_EnabledLogicalElement_Clr_StatusDescriptions(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->StatusDescriptions;
        KStringA_Clr(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_SetString_Status(
    CIM_EnabledLogicalElement* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Status;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_EnabledLogicalElement_Set_Status(
    CIM_EnabledLogicalElement* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Status;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_EnabledLogicalElement_Null_Status(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Status;
        KString_Null(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Clr_Status(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Status;
        KString_Clr(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Set_HealthState(
    CIM_EnabledLogicalElement* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->HealthState;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_EnabledLogicalElement_Null_HealthState(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->HealthState;
        KUint16_Null(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Clr_HealthState(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->HealthState;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_EnabledLogicalElement_HealthState_Enum
{
    CIM_EnabledLogicalElement_HealthState_Unknown = 0,
    CIM_EnabledLogicalElement_HealthState_OK = 5,
    CIM_EnabledLogicalElement_HealthState_Degraded_Warning = 10,
    CIM_EnabledLogicalElement_HealthState_Minor_failure = 15,
    CIM_EnabledLogicalElement_HealthState_Major_failure = 20,
    CIM_EnabledLogicalElement_HealthState_Critical_failure = 25,
    CIM_EnabledLogicalElement_HealthState_Non_recoverable_error = 30,
    CIM_EnabledLogicalElement_HealthState_DMTF_Reserved = 0,
    CIM_EnabledLogicalElement_HealthState_Vendor_Specific = 32768,
}
CIM_EnabledLogicalElement_HealthState_Enum;

/* "Unknown" */
#define CIM_EnabledLogicalElement_Set_HealthState_Unknown(SELF) \
    CIM_EnabledLogicalElement_Set_HealthState(SELF, 0)

/* "OK" */
#define CIM_EnabledLogicalElement_Set_HealthState_OK(SELF) \
    CIM_EnabledLogicalElement_Set_HealthState(SELF, 5)

/* "Degraded/Warning" */
#define CIM_EnabledLogicalElement_Set_HealthState_Degraded_Warning(SELF) \
    CIM_EnabledLogicalElement_Set_HealthState(SELF, 10)

/* "Minor failure" */
#define CIM_EnabledLogicalElement_Set_HealthState_Minor_failure(SELF) \
    CIM_EnabledLogicalElement_Set_HealthState(SELF, 15)

/* "Major failure" */
#define CIM_EnabledLogicalElement_Set_HealthState_Major_failure(SELF) \
    CIM_EnabledLogicalElement_Set_HealthState(SELF, 20)

/* "Critical failure" */
#define CIM_EnabledLogicalElement_Set_HealthState_Critical_failure(SELF) \
    CIM_EnabledLogicalElement_Set_HealthState(SELF, 25)

/* "Non-recoverable error" */
#define CIM_EnabledLogicalElement_Set_HealthState_Non_recoverable_error(SELF) \
    CIM_EnabledLogicalElement_Set_HealthState(SELF, 30)

/* "DMTF Reserved" */
#define CIM_EnabledLogicalElement_Set_HealthState_DMTF_Reserved(SELF) \
    CIM_EnabledLogicalElement_Set_HealthState(SELF, 0)

/* "Vendor Specific" */
#define CIM_EnabledLogicalElement_Set_HealthState_Vendor_Specific(SELF) \
    CIM_EnabledLogicalElement_Set_HealthState(SELF, 32768)

KINLINE void CIM_EnabledLogicalElement_Set_CommunicationStatus(
    CIM_EnabledLogicalElement* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->CommunicationStatus;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_EnabledLogicalElement_Null_CommunicationStatus(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->CommunicationStatus;
        KUint16_Null(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Clr_CommunicationStatus(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->CommunicationStatus;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_EnabledLogicalElement_CommunicationStatus_Enum
{
    CIM_EnabledLogicalElement_CommunicationStatus_Unknown = 0,
    CIM_EnabledLogicalElement_CommunicationStatus_Not_Available = 1,
    CIM_EnabledLogicalElement_CommunicationStatus_Communication_OK = 2,
    CIM_EnabledLogicalElement_CommunicationStatus_Lost_Communication = 3,
    CIM_EnabledLogicalElement_CommunicationStatus_No_Contact = 4,
    CIM_EnabledLogicalElement_CommunicationStatus_DMTF_Reserved = 0,
    CIM_EnabledLogicalElement_CommunicationStatus_Vendor_Reserved = 0,
}
CIM_EnabledLogicalElement_CommunicationStatus_Enum;

/* "Unknown" */
#define CIM_EnabledLogicalElement_Set_CommunicationStatus_Unknown(SELF) \
    CIM_EnabledLogicalElement_Set_CommunicationStatus(SELF, 0)

/* "Not Available" */
#define CIM_EnabledLogicalElement_Set_CommunicationStatus_Not_Available(SELF) \
    CIM_EnabledLogicalElement_Set_CommunicationStatus(SELF, 1)

/* "Communication OK" */
#define CIM_EnabledLogicalElement_Set_CommunicationStatus_Communication_OK(SELF) \
    CIM_EnabledLogicalElement_Set_CommunicationStatus(SELF, 2)

/* "Lost Communication" */
#define CIM_EnabledLogicalElement_Set_CommunicationStatus_Lost_Communication(SELF) \
    CIM_EnabledLogicalElement_Set_CommunicationStatus(SELF, 3)

/* "No Contact" */
#define CIM_EnabledLogicalElement_Set_CommunicationStatus_No_Contact(SELF) \
    CIM_EnabledLogicalElement_Set_CommunicationStatus(SELF, 4)

/* "DMTF Reserved" */
#define CIM_EnabledLogicalElement_Set_CommunicationStatus_DMTF_Reserved(SELF) \
    CIM_EnabledLogicalElement_Set_CommunicationStatus(SELF, 0)

/* "Vendor Reserved" */
#define CIM_EnabledLogicalElement_Set_CommunicationStatus_Vendor_Reserved(SELF) \
    CIM_EnabledLogicalElement_Set_CommunicationStatus(SELF, 0)

KINLINE void CIM_EnabledLogicalElement_Set_DetailedStatus(
    CIM_EnabledLogicalElement* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->DetailedStatus;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_EnabledLogicalElement_Null_DetailedStatus(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->DetailedStatus;
        KUint16_Null(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Clr_DetailedStatus(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->DetailedStatus;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_EnabledLogicalElement_DetailedStatus_Enum
{
    CIM_EnabledLogicalElement_DetailedStatus_Not_Available = 0,
    CIM_EnabledLogicalElement_DetailedStatus_No_Additional_Information = 1,
    CIM_EnabledLogicalElement_DetailedStatus_Stressed = 2,
    CIM_EnabledLogicalElement_DetailedStatus_Predictive_Failure = 3,
    CIM_EnabledLogicalElement_DetailedStatus_Non_Recoverable_Error = 4,
    CIM_EnabledLogicalElement_DetailedStatus_Supporting_Entity_in_Error = 5,
    CIM_EnabledLogicalElement_DetailedStatus_DMTF_Reserved = 0,
    CIM_EnabledLogicalElement_DetailedStatus_Vendor_Reserved = 0,
}
CIM_EnabledLogicalElement_DetailedStatus_Enum;

/* "Not Available" */
#define CIM_EnabledLogicalElement_Set_DetailedStatus_Not_Available(SELF) \
    CIM_EnabledLogicalElement_Set_DetailedStatus(SELF, 0)

/* "No Additional Information" */
#define CIM_EnabledLogicalElement_Set_DetailedStatus_No_Additional_Information(SELF) \
    CIM_EnabledLogicalElement_Set_DetailedStatus(SELF, 1)

/* "Stressed" */
#define CIM_EnabledLogicalElement_Set_DetailedStatus_Stressed(SELF) \
    CIM_EnabledLogicalElement_Set_DetailedStatus(SELF, 2)

/* "Predictive Failure" */
#define CIM_EnabledLogicalElement_Set_DetailedStatus_Predictive_Failure(SELF) \
    CIM_EnabledLogicalElement_Set_DetailedStatus(SELF, 3)

/* "Non-Recoverable Error" */
#define CIM_EnabledLogicalElement_Set_DetailedStatus_Non_Recoverable_Error(SELF) \
    CIM_EnabledLogicalElement_Set_DetailedStatus(SELF, 4)

/* "Supporting Entity in Error" */
#define CIM_EnabledLogicalElement_Set_DetailedStatus_Supporting_Entity_in_Error(SELF) \
    CIM_EnabledLogicalElement_Set_DetailedStatus(SELF, 5)

/* "DMTF Reserved" */
#define CIM_EnabledLogicalElement_Set_DetailedStatus_DMTF_Reserved(SELF) \
    CIM_EnabledLogicalElement_Set_DetailedStatus(SELF, 0)

/* "Vendor Reserved" */
#define CIM_EnabledLogicalElement_Set_DetailedStatus_Vendor_Reserved(SELF) \
    CIM_EnabledLogicalElement_Set_DetailedStatus(SELF, 0)

KINLINE void CIM_EnabledLogicalElement_Set_OperatingStatus(
    CIM_EnabledLogicalElement* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->OperatingStatus;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_EnabledLogicalElement_Null_OperatingStatus(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->OperatingStatus;
        KUint16_Null(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Clr_OperatingStatus(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->OperatingStatus;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_EnabledLogicalElement_OperatingStatus_Enum
{
    CIM_EnabledLogicalElement_OperatingStatus_Unknown = 0,
    CIM_EnabledLogicalElement_OperatingStatus_Not_Available = 1,
    CIM_EnabledLogicalElement_OperatingStatus_Servicing = 2,
    CIM_EnabledLogicalElement_OperatingStatus_Starting = 3,
    CIM_EnabledLogicalElement_OperatingStatus_Stopping = 4,
    CIM_EnabledLogicalElement_OperatingStatus_Stopped = 5,
    CIM_EnabledLogicalElement_OperatingStatus_Aborted = 6,
    CIM_EnabledLogicalElement_OperatingStatus_Dormant = 7,
    CIM_EnabledLogicalElement_OperatingStatus_Completed = 8,
    CIM_EnabledLogicalElement_OperatingStatus_Migrating = 9,
    CIM_EnabledLogicalElement_OperatingStatus_Emigrating = 10,
    CIM_EnabledLogicalElement_OperatingStatus_Immigrating = 11,
    CIM_EnabledLogicalElement_OperatingStatus_Snapshotting = 12,
    CIM_EnabledLogicalElement_OperatingStatus_Shutting_Down = 13,
    CIM_EnabledLogicalElement_OperatingStatus_In_Test = 14,
    CIM_EnabledLogicalElement_OperatingStatus_Transitioning = 15,
    CIM_EnabledLogicalElement_OperatingStatus_In_Service = 16,
    CIM_EnabledLogicalElement_OperatingStatus_DMTF_Reserved = 0,
    CIM_EnabledLogicalElement_OperatingStatus_Vendor_Reserved = 0,
}
CIM_EnabledLogicalElement_OperatingStatus_Enum;

/* "Unknown" */
#define CIM_EnabledLogicalElement_Set_OperatingStatus_Unknown(SELF) \
    CIM_EnabledLogicalElement_Set_OperatingStatus(SELF, 0)

/* "Not Available" */
#define CIM_EnabledLogicalElement_Set_OperatingStatus_Not_Available(SELF) \
    CIM_EnabledLogicalElement_Set_OperatingStatus(SELF, 1)

/* "Servicing" */
#define CIM_EnabledLogicalElement_Set_OperatingStatus_Servicing(SELF) \
    CIM_EnabledLogicalElement_Set_OperatingStatus(SELF, 2)

/* "Starting" */
#define CIM_EnabledLogicalElement_Set_OperatingStatus_Starting(SELF) \
    CIM_EnabledLogicalElement_Set_OperatingStatus(SELF, 3)

/* "Stopping" */
#define CIM_EnabledLogicalElement_Set_OperatingStatus_Stopping(SELF) \
    CIM_EnabledLogicalElement_Set_OperatingStatus(SELF, 4)

/* "Stopped" */
#define CIM_EnabledLogicalElement_Set_OperatingStatus_Stopped(SELF) \
    CIM_EnabledLogicalElement_Set_OperatingStatus(SELF, 5)

/* "Aborted" */
#define CIM_EnabledLogicalElement_Set_OperatingStatus_Aborted(SELF) \
    CIM_EnabledLogicalElement_Set_OperatingStatus(SELF, 6)

/* "Dormant" */
#define CIM_EnabledLogicalElement_Set_OperatingStatus_Dormant(SELF) \
    CIM_EnabledLogicalElement_Set_OperatingStatus(SELF, 7)

/* "Completed" */
#define CIM_EnabledLogicalElement_Set_OperatingStatus_Completed(SELF) \
    CIM_EnabledLogicalElement_Set_OperatingStatus(SELF, 8)

/* "Migrating" */
#define CIM_EnabledLogicalElement_Set_OperatingStatus_Migrating(SELF) \
    CIM_EnabledLogicalElement_Set_OperatingStatus(SELF, 9)

/* "Emigrating" */
#define CIM_EnabledLogicalElement_Set_OperatingStatus_Emigrating(SELF) \
    CIM_EnabledLogicalElement_Set_OperatingStatus(SELF, 10)

/* "Immigrating" */
#define CIM_EnabledLogicalElement_Set_OperatingStatus_Immigrating(SELF) \
    CIM_EnabledLogicalElement_Set_OperatingStatus(SELF, 11)

/* "Snapshotting" */
#define CIM_EnabledLogicalElement_Set_OperatingStatus_Snapshotting(SELF) \
    CIM_EnabledLogicalElement_Set_OperatingStatus(SELF, 12)

/* "Shutting Down" */
#define CIM_EnabledLogicalElement_Set_OperatingStatus_Shutting_Down(SELF) \
    CIM_EnabledLogicalElement_Set_OperatingStatus(SELF, 13)

/* "In Test" */
#define CIM_EnabledLogicalElement_Set_OperatingStatus_In_Test(SELF) \
    CIM_EnabledLogicalElement_Set_OperatingStatus(SELF, 14)

/* "Transitioning" */
#define CIM_EnabledLogicalElement_Set_OperatingStatus_Transitioning(SELF) \
    CIM_EnabledLogicalElement_Set_OperatingStatus(SELF, 15)

/* "In Service" */
#define CIM_EnabledLogicalElement_Set_OperatingStatus_In_Service(SELF) \
    CIM_EnabledLogicalElement_Set_OperatingStatus(SELF, 16)

/* "DMTF Reserved" */
#define CIM_EnabledLogicalElement_Set_OperatingStatus_DMTF_Reserved(SELF) \
    CIM_EnabledLogicalElement_Set_OperatingStatus(SELF, 0)

/* "Vendor Reserved" */
#define CIM_EnabledLogicalElement_Set_OperatingStatus_Vendor_Reserved(SELF) \
    CIM_EnabledLogicalElement_Set_OperatingStatus(SELF, 0)

KINLINE void CIM_EnabledLogicalElement_Set_PrimaryStatus(
    CIM_EnabledLogicalElement* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->PrimaryStatus;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_EnabledLogicalElement_Null_PrimaryStatus(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->PrimaryStatus;
        KUint16_Null(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Clr_PrimaryStatus(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->PrimaryStatus;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_EnabledLogicalElement_PrimaryStatus_Enum
{
    CIM_EnabledLogicalElement_PrimaryStatus_Unknown = 0,
    CIM_EnabledLogicalElement_PrimaryStatus_OK = 1,
    CIM_EnabledLogicalElement_PrimaryStatus_Degraded = 2,
    CIM_EnabledLogicalElement_PrimaryStatus_Error = 3,
    CIM_EnabledLogicalElement_PrimaryStatus_DMTF_Reserved = 0,
    CIM_EnabledLogicalElement_PrimaryStatus_Vendor_Reserved = 0,
}
CIM_EnabledLogicalElement_PrimaryStatus_Enum;

/* "Unknown" */
#define CIM_EnabledLogicalElement_Set_PrimaryStatus_Unknown(SELF) \
    CIM_EnabledLogicalElement_Set_PrimaryStatus(SELF, 0)

/* "OK" */
#define CIM_EnabledLogicalElement_Set_PrimaryStatus_OK(SELF) \
    CIM_EnabledLogicalElement_Set_PrimaryStatus(SELF, 1)

/* "Degraded" */
#define CIM_EnabledLogicalElement_Set_PrimaryStatus_Degraded(SELF) \
    CIM_EnabledLogicalElement_Set_PrimaryStatus(SELF, 2)

/* "Error" */
#define CIM_EnabledLogicalElement_Set_PrimaryStatus_Error(SELF) \
    CIM_EnabledLogicalElement_Set_PrimaryStatus(SELF, 3)

/* "DMTF Reserved" */
#define CIM_EnabledLogicalElement_Set_PrimaryStatus_DMTF_Reserved(SELF) \
    CIM_EnabledLogicalElement_Set_PrimaryStatus(SELF, 0)

/* "Vendor Reserved" */
#define CIM_EnabledLogicalElement_Set_PrimaryStatus_Vendor_Reserved(SELF) \
    CIM_EnabledLogicalElement_Set_PrimaryStatus(SELF, 0)

KINLINE void CIM_EnabledLogicalElement_Set_EnabledState(
    CIM_EnabledLogicalElement* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->EnabledState;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_EnabledLogicalElement_Null_EnabledState(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->EnabledState;
        KUint16_Null(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Clr_EnabledState(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->EnabledState;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_EnabledLogicalElement_EnabledState_Enum
{
    CIM_EnabledLogicalElement_EnabledState_Unknown = 0,
    CIM_EnabledLogicalElement_EnabledState_Other = 1,
    CIM_EnabledLogicalElement_EnabledState_Enabled = 2,
    CIM_EnabledLogicalElement_EnabledState_Disabled = 3,
    CIM_EnabledLogicalElement_EnabledState_Shutting_Down = 4,
    CIM_EnabledLogicalElement_EnabledState_Not_Applicable = 5,
    CIM_EnabledLogicalElement_EnabledState_Enabled_but_Offline = 6,
    CIM_EnabledLogicalElement_EnabledState_In_Test = 7,
    CIM_EnabledLogicalElement_EnabledState_Deferred = 8,
    CIM_EnabledLogicalElement_EnabledState_Quiesce = 9,
    CIM_EnabledLogicalElement_EnabledState_Starting = 10,
    CIM_EnabledLogicalElement_EnabledState_DMTF_Reserved = 11,
    CIM_EnabledLogicalElement_EnabledState_Vendor_Reserved = 32768,
}
CIM_EnabledLogicalElement_EnabledState_Enum;

/* "Unknown" */
#define CIM_EnabledLogicalElement_Set_EnabledState_Unknown(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledState(SELF, 0)

/* "Other" */
#define CIM_EnabledLogicalElement_Set_EnabledState_Other(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledState(SELF, 1)

/* "Enabled" */
#define CIM_EnabledLogicalElement_Set_EnabledState_Enabled(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledState(SELF, 2)

/* "Disabled" */
#define CIM_EnabledLogicalElement_Set_EnabledState_Disabled(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledState(SELF, 3)

/* "Shutting Down" */
#define CIM_EnabledLogicalElement_Set_EnabledState_Shutting_Down(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledState(SELF, 4)

/* "Not Applicable" */
#define CIM_EnabledLogicalElement_Set_EnabledState_Not_Applicable(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledState(SELF, 5)

/* "Enabled but Offline" */
#define CIM_EnabledLogicalElement_Set_EnabledState_Enabled_but_Offline(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledState(SELF, 6)

/* "In Test" */
#define CIM_EnabledLogicalElement_Set_EnabledState_In_Test(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledState(SELF, 7)

/* "Deferred" */
#define CIM_EnabledLogicalElement_Set_EnabledState_Deferred(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledState(SELF, 8)

/* "Quiesce" */
#define CIM_EnabledLogicalElement_Set_EnabledState_Quiesce(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledState(SELF, 9)

/* "Starting" */
#define CIM_EnabledLogicalElement_Set_EnabledState_Starting(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledState(SELF, 10)

/* "DMTF Reserved" */
#define CIM_EnabledLogicalElement_Set_EnabledState_DMTF_Reserved(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledState(SELF, 11)

/* "Vendor Reserved" */
#define CIM_EnabledLogicalElement_Set_EnabledState_Vendor_Reserved(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledState(SELF, 32768)

KINLINE void CIM_EnabledLogicalElement_SetString_OtherEnabledState(
    CIM_EnabledLogicalElement* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OtherEnabledState;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_EnabledLogicalElement_Set_OtherEnabledState(
    CIM_EnabledLogicalElement* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OtherEnabledState;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_EnabledLogicalElement_Null_OtherEnabledState(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OtherEnabledState;
        KString_Null(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Clr_OtherEnabledState(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OtherEnabledState;
        KString_Clr(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Set_RequestedState(
    CIM_EnabledLogicalElement* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->RequestedState;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_EnabledLogicalElement_Null_RequestedState(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->RequestedState;
        KUint16_Null(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Clr_RequestedState(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->RequestedState;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_EnabledLogicalElement_RequestedState_Enum
{
    CIM_EnabledLogicalElement_RequestedState_Unknown = 0,
    CIM_EnabledLogicalElement_RequestedState_Enabled = 2,
    CIM_EnabledLogicalElement_RequestedState_Disabled = 3,
    CIM_EnabledLogicalElement_RequestedState_Shut_Down = 4,
    CIM_EnabledLogicalElement_RequestedState_No_Change = 5,
    CIM_EnabledLogicalElement_RequestedState_Offline = 6,
    CIM_EnabledLogicalElement_RequestedState_Test = 7,
    CIM_EnabledLogicalElement_RequestedState_Deferred = 8,
    CIM_EnabledLogicalElement_RequestedState_Quiesce = 9,
    CIM_EnabledLogicalElement_RequestedState_Reboot = 10,
    CIM_EnabledLogicalElement_RequestedState_Reset = 11,
    CIM_EnabledLogicalElement_RequestedState_Not_Applicable = 12,
    CIM_EnabledLogicalElement_RequestedState_DMTF_Reserved = 0,
    CIM_EnabledLogicalElement_RequestedState_Vendor_Reserved = 32768,
}
CIM_EnabledLogicalElement_RequestedState_Enum;

/* "Unknown" */
#define CIM_EnabledLogicalElement_Set_RequestedState_Unknown(SELF) \
    CIM_EnabledLogicalElement_Set_RequestedState(SELF, 0)

/* "Enabled" */
#define CIM_EnabledLogicalElement_Set_RequestedState_Enabled(SELF) \
    CIM_EnabledLogicalElement_Set_RequestedState(SELF, 2)

/* "Disabled" */
#define CIM_EnabledLogicalElement_Set_RequestedState_Disabled(SELF) \
    CIM_EnabledLogicalElement_Set_RequestedState(SELF, 3)

/* "Shut Down" */
#define CIM_EnabledLogicalElement_Set_RequestedState_Shut_Down(SELF) \
    CIM_EnabledLogicalElement_Set_RequestedState(SELF, 4)

/* "No Change" */
#define CIM_EnabledLogicalElement_Set_RequestedState_No_Change(SELF) \
    CIM_EnabledLogicalElement_Set_RequestedState(SELF, 5)

/* "Offline" */
#define CIM_EnabledLogicalElement_Set_RequestedState_Offline(SELF) \
    CIM_EnabledLogicalElement_Set_RequestedState(SELF, 6)

/* "Test" */
#define CIM_EnabledLogicalElement_Set_RequestedState_Test(SELF) \
    CIM_EnabledLogicalElement_Set_RequestedState(SELF, 7)

/* "Deferred" */
#define CIM_EnabledLogicalElement_Set_RequestedState_Deferred(SELF) \
    CIM_EnabledLogicalElement_Set_RequestedState(SELF, 8)

/* "Quiesce" */
#define CIM_EnabledLogicalElement_Set_RequestedState_Quiesce(SELF) \
    CIM_EnabledLogicalElement_Set_RequestedState(SELF, 9)

/* "Reboot" */
#define CIM_EnabledLogicalElement_Set_RequestedState_Reboot(SELF) \
    CIM_EnabledLogicalElement_Set_RequestedState(SELF, 10)

/* "Reset" */
#define CIM_EnabledLogicalElement_Set_RequestedState_Reset(SELF) \
    CIM_EnabledLogicalElement_Set_RequestedState(SELF, 11)

/* "Not Applicable" */
#define CIM_EnabledLogicalElement_Set_RequestedState_Not_Applicable(SELF) \
    CIM_EnabledLogicalElement_Set_RequestedState(SELF, 12)

/* "DMTF Reserved" */
#define CIM_EnabledLogicalElement_Set_RequestedState_DMTF_Reserved(SELF) \
    CIM_EnabledLogicalElement_Set_RequestedState(SELF, 0)

/* "Vendor Reserved" */
#define CIM_EnabledLogicalElement_Set_RequestedState_Vendor_Reserved(SELF) \
    CIM_EnabledLogicalElement_Set_RequestedState(SELF, 32768)

KINLINE void CIM_EnabledLogicalElement_Set_EnabledDefault(
    CIM_EnabledLogicalElement* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->EnabledDefault;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_EnabledLogicalElement_Null_EnabledDefault(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->EnabledDefault;
        KUint16_Null(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Clr_EnabledDefault(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->EnabledDefault;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_EnabledLogicalElement_EnabledDefault_Enum
{
    CIM_EnabledLogicalElement_EnabledDefault_Enabled = 2,
    CIM_EnabledLogicalElement_EnabledDefault_Disabled = 3,
    CIM_EnabledLogicalElement_EnabledDefault_Not_Applicable = 5,
    CIM_EnabledLogicalElement_EnabledDefault_Enabled_but_Offline = 6,
    CIM_EnabledLogicalElement_EnabledDefault_No_Default = 7,
    CIM_EnabledLogicalElement_EnabledDefault_Quiesce = 9,
    CIM_EnabledLogicalElement_EnabledDefault_DMTF_Reserved = 0,
    CIM_EnabledLogicalElement_EnabledDefault_Vendor_Reserved = 32768,
}
CIM_EnabledLogicalElement_EnabledDefault_Enum;

/* "Enabled" */
#define CIM_EnabledLogicalElement_Set_EnabledDefault_Enabled(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledDefault(SELF, 2)

/* "Disabled" */
#define CIM_EnabledLogicalElement_Set_EnabledDefault_Disabled(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledDefault(SELF, 3)

/* "Not Applicable" */
#define CIM_EnabledLogicalElement_Set_EnabledDefault_Not_Applicable(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledDefault(SELF, 5)

/* "Enabled but Offline" */
#define CIM_EnabledLogicalElement_Set_EnabledDefault_Enabled_but_Offline(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledDefault(SELF, 6)

/* "No Default" */
#define CIM_EnabledLogicalElement_Set_EnabledDefault_No_Default(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledDefault(SELF, 7)

/* "Quiesce" */
#define CIM_EnabledLogicalElement_Set_EnabledDefault_Quiesce(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledDefault(SELF, 9)

/* "DMTF Reserved" */
#define CIM_EnabledLogicalElement_Set_EnabledDefault_DMTF_Reserved(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledDefault(SELF, 0)

/* "Vendor Reserved" */
#define CIM_EnabledLogicalElement_Set_EnabledDefault_Vendor_Reserved(SELF) \
    CIM_EnabledLogicalElement_Set_EnabledDefault(SELF, 32768)

KINLINE void CIM_EnabledLogicalElement_Set_TimeOfLastStateChange(
    CIM_EnabledLogicalElement* self,
    CMPIDateTime* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->TimeOfLastStateChange;
        KDateTime_Set(field, x);
    }
}

KINLINE void CIM_EnabledLogicalElement_Null_TimeOfLastStateChange(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->TimeOfLastStateChange;
        KDateTime_Null(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Clr_TimeOfLastStateChange(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KDateTime* field = (KDateTime*)&self->TimeOfLastStateChange;
        KDateTime_Clr(field);
    }
}

KINLINE CMPIBoolean CIM_EnabledLogicalElement_Init_AvailableRequestedStates(
    CIM_EnabledLogicalElement* self,
    CMPICount count)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16A* field = (KUint16A*)&self->AvailableRequestedStates;
        return KUint16A_Init(field, self->__base.cb, count);
    }
    return 0;
}

KINLINE void CIM_EnabledLogicalElement_InitNull_AvailableRequestedStates(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16A* field = (KUint16A*)&self->AvailableRequestedStates;
        KUint16A_InitNull(field);
    }
}

KINLINE CMPIBoolean CIM_EnabledLogicalElement_Set_AvailableRequestedStates(
    CIM_EnabledLogicalElement* self,
    CMPICount i,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16A* field = (KUint16A*)&self->AvailableRequestedStates;
        return KUint16A_Set(field, i, x);
    }
    return 0;
}

KINLINE KUint16 CIM_EnabledLogicalElement_Get_AvailableRequestedStates(
    CIM_EnabledLogicalElement* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16A* field = (KUint16A*)&self->AvailableRequestedStates;
        return KUint16A_Get(field, i);
    }
    return KUint16A_Get(NULL, 0);
}

KINLINE CMPIBoolean CIM_EnabledLogicalElement_Null_AvailableRequestedStates(
    CIM_EnabledLogicalElement* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16A* field = (KUint16A*)&self->AvailableRequestedStates;
        return KUint16A_Null(field, i);
    }
    return 0;
}

KINLINE void CIM_EnabledLogicalElement_Clr_AvailableRequestedStates(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16A* field = (KUint16A*)&self->AvailableRequestedStates;
        KUint16A_Clr(field);
    }
}

typedef enum _CIM_EnabledLogicalElement_AvailableRequestedStates_Enum
{
    CIM_EnabledLogicalElement_AvailableRequestedStates_Enabled = 2,
    CIM_EnabledLogicalElement_AvailableRequestedStates_Disabled = 3,
    CIM_EnabledLogicalElement_AvailableRequestedStates_Shut_Down = 4,
    CIM_EnabledLogicalElement_AvailableRequestedStates_Offline = 6,
    CIM_EnabledLogicalElement_AvailableRequestedStates_Test = 7,
    CIM_EnabledLogicalElement_AvailableRequestedStates_Defer = 8,
    CIM_EnabledLogicalElement_AvailableRequestedStates_Quiesce = 9,
    CIM_EnabledLogicalElement_AvailableRequestedStates_Reboot = 10,
    CIM_EnabledLogicalElement_AvailableRequestedStates_Reset = 11,
    CIM_EnabledLogicalElement_AvailableRequestedStates_DMTF_Reserved = 0,
}
CIM_EnabledLogicalElement_AvailableRequestedStates_Enum;

/* "Enabled" */
#define CIM_EnabledLogicalElement_Set_AvailableRequestedStates_Enabled(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_AvailableRequestedStates(SELF, INDEX, 2)

/* "Disabled" */
#define CIM_EnabledLogicalElement_Set_AvailableRequestedStates_Disabled(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_AvailableRequestedStates(SELF, INDEX, 3)

/* "Shut Down" */
#define CIM_EnabledLogicalElement_Set_AvailableRequestedStates_Shut_Down(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_AvailableRequestedStates(SELF, INDEX, 4)

/* "Offline" */
#define CIM_EnabledLogicalElement_Set_AvailableRequestedStates_Offline(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_AvailableRequestedStates(SELF, INDEX, 6)

/* "Test" */
#define CIM_EnabledLogicalElement_Set_AvailableRequestedStates_Test(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_AvailableRequestedStates(SELF, INDEX, 7)

/* "Defer" */
#define CIM_EnabledLogicalElement_Set_AvailableRequestedStates_Defer(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_AvailableRequestedStates(SELF, INDEX, 8)

/* "Quiesce" */
#define CIM_EnabledLogicalElement_Set_AvailableRequestedStates_Quiesce(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_AvailableRequestedStates(SELF, INDEX, 9)

/* "Reboot" */
#define CIM_EnabledLogicalElement_Set_AvailableRequestedStates_Reboot(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_AvailableRequestedStates(SELF, INDEX, 10)

/* "Reset" */
#define CIM_EnabledLogicalElement_Set_AvailableRequestedStates_Reset(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_AvailableRequestedStates(SELF, INDEX, 11)

/* "DMTF Reserved" */
#define CIM_EnabledLogicalElement_Set_AvailableRequestedStates_DMTF_Reserved(SELF, INDEX)\
    CIM_EnabledLogicalElement_Set_AvailableRequestedStates(SELF, INDEX, 0)

KINLINE void CIM_EnabledLogicalElement_Set_TransitioningToState(
    CIM_EnabledLogicalElement* self,
    CMPIUint16 x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->TransitioningToState;
        KUint16_Set(field, x);
    }
}

KINLINE void CIM_EnabledLogicalElement_Null_TransitioningToState(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->TransitioningToState;
        KUint16_Null(field);
    }
}

KINLINE void CIM_EnabledLogicalElement_Clr_TransitioningToState(
    CIM_EnabledLogicalElement* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KUint16* field = (KUint16*)&self->TransitioningToState;
        KUint16_Clr(field);
    }
}

typedef enum _CIM_EnabledLogicalElement_TransitioningToState_Enum
{
    CIM_EnabledLogicalElement_TransitioningToState_Unknown = 0,
    CIM_EnabledLogicalElement_TransitioningToState_Enabled = 2,
    CIM_EnabledLogicalElement_TransitioningToState_Disabled = 3,
    CIM_EnabledLogicalElement_TransitioningToState_Shut_Down = 4,
    CIM_EnabledLogicalElement_TransitioningToState_No_Change = 5,
    CIM_EnabledLogicalElement_TransitioningToState_Offline = 6,
    CIM_EnabledLogicalElement_TransitioningToState_Test = 7,
    CIM_EnabledLogicalElement_TransitioningToState_Defer = 8,
    CIM_EnabledLogicalElement_TransitioningToState_Quiesce = 9,
    CIM_EnabledLogicalElement_TransitioningToState_Reboot = 10,
    CIM_EnabledLogicalElement_TransitioningToState_Reset = 11,
    CIM_EnabledLogicalElement_TransitioningToState_Not_Applicable = 12,
    CIM_EnabledLogicalElement_TransitioningToState_DMTF_Reserved = 0,
}
CIM_EnabledLogicalElement_TransitioningToState_Enum;

/* "Unknown" */
#define CIM_EnabledLogicalElement_Set_TransitioningToState_Unknown(SELF) \
    CIM_EnabledLogicalElement_Set_TransitioningToState(SELF, 0)

/* "Enabled" */
#define CIM_EnabledLogicalElement_Set_TransitioningToState_Enabled(SELF) \
    CIM_EnabledLogicalElement_Set_TransitioningToState(SELF, 2)

/* "Disabled" */
#define CIM_EnabledLogicalElement_Set_TransitioningToState_Disabled(SELF) \
    CIM_EnabledLogicalElement_Set_TransitioningToState(SELF, 3)

/* "Shut Down" */
#define CIM_EnabledLogicalElement_Set_TransitioningToState_Shut_Down(SELF) \
    CIM_EnabledLogicalElement_Set_TransitioningToState(SELF, 4)

/* "No Change" */
#define CIM_EnabledLogicalElement_Set_TransitioningToState_No_Change(SELF) \
    CIM_EnabledLogicalElement_Set_TransitioningToState(SELF, 5)

/* "Offline" */
#define CIM_EnabledLogicalElement_Set_TransitioningToState_Offline(SELF) \
    CIM_EnabledLogicalElement_Set_TransitioningToState(SELF, 6)

/* "Test" */
#define CIM_EnabledLogicalElement_Set_TransitioningToState_Test(SELF) \
    CIM_EnabledLogicalElement_Set_TransitioningToState(SELF, 7)

/* "Defer" */
#define CIM_EnabledLogicalElement_Set_TransitioningToState_Defer(SELF) \
    CIM_EnabledLogicalElement_Set_TransitioningToState(SELF, 8)

/* "Quiesce" */
#define CIM_EnabledLogicalElement_Set_TransitioningToState_Quiesce(SELF) \
    CIM_EnabledLogicalElement_Set_TransitioningToState(SELF, 9)

/* "Reboot" */
#define CIM_EnabledLogicalElement_Set_TransitioningToState_Reboot(SELF) \
    CIM_EnabledLogicalElement_Set_TransitioningToState(SELF, 10)

/* "Reset" */
#define CIM_EnabledLogicalElement_Set_TransitioningToState_Reset(SELF) \
    CIM_EnabledLogicalElement_Set_TransitioningToState(SELF, 11)

/* "Not Applicable" */
#define CIM_EnabledLogicalElement_Set_TransitioningToState_Not_Applicable(SELF) \
    CIM_EnabledLogicalElement_Set_TransitioningToState(SELF, 12)

/* "DMTF Reserved" */
#define CIM_EnabledLogicalElement_Set_TransitioningToState_DMTF_Reserved(SELF) \
    CIM_EnabledLogicalElement_Set_TransitioningToState(SELF, 0)

/* classname=CIM_EnabledLogicalElement */
typedef struct _CIM_EnabledLogicalElement_RequestStateChange_Args
{
    KBase __base;
    /* IN */
    KUint16 RequestedState;
    /* OUT */
    KRef Job; /* CIM_ConcreteJob */
    /* IN */
    KDateTime TimeoutPeriod;
}
CIM_EnabledLogicalElement_RequestStateChange_Args;

static const unsigned char __CIM_EnabledLogicalElement_RequestStateChange_Args_sig[] =
{
    0x12,0x52,0x65,0x71,0x75,0x65,0x73,0x74,0x53,0x74,0x61,0x74,0x65,0x43,0x68,
    0x61,0x6e,0x67,0x65,0x00,0x03,0x23,0x0e,0x52,0x65,0x71,0x75,0x65,0x73,0x74,
    0x65,0x64,0x53,0x74,0x61,0x74,0x65,0x00,0x1e,0x03,0x4a,0x6f,0x62,0x00,0x2d,
    0x0d,0x54,0x69,0x6d,0x65,0x6f,0x75,0x74,0x50,0x65,0x72,0x69,0x6f,0x64,0x00,
};

KINLINE void CIM_EnabledLogicalElement_RequestStateChange_Args_Init(
    CIM_EnabledLogicalElement_RequestStateChange_Args* self,
    const CMPIBroker* cb)
{
    const unsigned char* sig = __CIM_EnabledLogicalElement_RequestStateChange_Args_sig;
    KBase_Init(&self->__base, cb, sizeof(*self), sig, NULL);
    self->Job.__sig = __CIM_ConcreteJob_sig;
}

KINLINE CMPIStatus CIM_EnabledLogicalElement_RequestStateChange_Args_InitFromArgs(
    CIM_EnabledLogicalElement_RequestStateChange_Args* self,
    const CMPIBroker* cb,
    const CMPIArgs* x,
    CMPIBoolean in,
    CMPIBoolean out)
{
    CIM_EnabledLogicalElement_RequestStateChange_Args_Init(self, cb);
    return KBase_FromArgs(&self->__base, x, in, out);
}

KINLINE CMPIArgs* CIM_EnabledLogicalElement_RequestStateChange_Args_ToArgs(
    const CIM_EnabledLogicalElement_RequestStateChange_Args* self,
    CMPIBoolean in,
    CMPIBoolean out,
    CMPIStatus* status)
{
    return KBase_ToArgs(&self->__base, in, out, status);
}

KINLINE CMPIStatus CIM_EnabledLogicalElement_RequestStateChange_Args_SetArgs(
    const CIM_EnabledLogicalElement_RequestStateChange_Args* self,
    CMPIBoolean in,
    CMPIBoolean out,
    CMPIArgs* ca)
{
    return KBase_SetToArgs(&self->__base, in, out, ca);
}

KINLINE void CIM_EnabledLogicalElement_RequestStateChange_Args_Print(
    const CIM_EnabledLogicalElement_RequestStateChange_Args* self,
    FILE* os)
{
    KBase_Print(os, &self->__base, 'a');
}

/*
**==============================================================================
**
** CIM_EnabledLogicalElement methods
**
**==============================================================================
*/

KEXTERN KUint32 CIM_EnabledLogicalElement_RequestStateChange(
    const CMPIBroker* cb,
    CMPIMethodMI* mi,
    const CMPIContext* context,
    const CIM_EnabledLogicalElementRef* self,
    const KUint16* RequestedState,
    KRef* Job,
    const KDateTime* TimeoutPeriod,
    CMPIStatus* status);

KINLINE CMPIStatus CIM_EnabledLogicalElement_DispatchMethod(
    const CMPIBroker* cb,
    CMPIMethodMI* mi,
    const CMPIContext* cc,
    const CMPIResult* cr,
    const CMPIObjectPath* cop,
    const char* meth,
    const CMPIArgs* in,
    CMPIArgs* out)
{
    CIM_EnabledLogicalElementRef self;

    KReturnIf(CIM_EnabledLogicalElementRef_InitFromObjectPath(&self, cb, cop));

    if (strcasecmp(meth, "RequestStateChange") == 0)
    {
        CMPIStatus st = KSTATUS_INIT;
        CIM_EnabledLogicalElement_RequestStateChange_Args args;
        KUint32 r;

        KReturnIf(CIM_EnabledLogicalElement_RequestStateChange_Args_InitFromArgs(
            &args, cb, in, 1, 0));

        r = CIM_EnabledLogicalElement_RequestStateChange(
            cb,
            mi,
            cc,
            &self,
            &args.RequestedState,
            &args.Job,
            &args.TimeoutPeriod,
            &st);

        if (!KOkay(st))
            return st;

        if (!r.exists)
            KReturn(ERR_FAILED);

        KReturnIf(CIM_EnabledLogicalElement_RequestStateChange_Args_SetArgs(
            &args, 0, 1, out));
        KReturnUint32Data(cr, &r);
        CMReturnDone(cr);

        KReturn(OK);
    }

    KReturn(ERR_METHOD_NOT_FOUND);
}

#define CIM_EnabledLogicalElement_ClassName "CIM_EnabledLogicalElement"

#endif /* _konkrete_CIM_EnabledLogicalElement_h */
