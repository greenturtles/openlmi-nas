/*
**==============================================================================
**
** CAUTION: This file generated by KonkretCMPI. Please do not edit.
**
**==============================================================================
*/

#ifndef _konkrete_CIM_Message_h
#define _konkrete_CIM_Message_h

#include <konkret/konkret.h>

#include <strings.h>

/*
**==============================================================================
**
** struct CIM_MessageRef 
**
**==============================================================================
*/

/* classname=CIM_Message */
typedef struct _CIM_MessageRef
{
    KBase __base;
    /* CIM_Message features */
}
CIM_MessageRef;

static const unsigned char __CIM_MessageRef_sig[] =
{
    0x0b,0x43,0x49,0x4d,0x5f,0x4d,0x65,0x73,0x73,0x61,0x67,0x65,0x00,0x00,
};

KINLINE void CIM_MessageRef_Init(
    CIM_MessageRef* self,
    const CMPIBroker* cb,
    const char* ns)
{
    const unsigned char* sig = __CIM_MessageRef_sig;
    KBase_Init(&self->__base, cb, sizeof(*self), sig, ns);
}

KINLINE CMPIStatus CIM_MessageRef_InitFromInstance(
    CIM_MessageRef* self,
    const CMPIBroker* cb,
    const CMPIInstance* x)
{
    CIM_MessageRef_Init(self, cb, NULL);
    return KBase_FromInstance(&self->__base, x);
}

KINLINE CMPIStatus CIM_MessageRef_InitFromObjectPath(
    CIM_MessageRef* self,
    const CMPIBroker* cb,
    const CMPIObjectPath* x)
{
    CIM_MessageRef_Init(self, cb, NULL);
    return KBase_FromObjectPath(&self->__base, x);
}

KINLINE void CIM_MessageRef_Print(
    const CIM_MessageRef* self,
    FILE* os)
{
    KBase_Print(os, &self->__base, 'r');
}

KINLINE CMPIInstance* CIM_MessageRef_ToInstance(
    const CIM_MessageRef* self,
    CMPIStatus* status)
{
    return KBase_ToInstance(&self->__base, status);
}

KINLINE CMPIObjectPath* CIM_MessageRef_ToObjectPath(
    const CIM_MessageRef* self,
    CMPIStatus* status)
{
    return KBase_ToObjectPath(&self->__base, status);
}

KINLINE const char* CIM_MessageRef_NameSpace(
    CIM_MessageRef* self)
{
    if (self && self->__base.magic == KMAGIC)
        return self->__base.ns ? KChars(self->__base.ns) : NULL;
    return NULL;
}

/*
**==============================================================================
**
** struct CIM_Message 
**
**==============================================================================
*/

/* classname=CIM_Message */
typedef struct _CIM_Message
{
    KBase __base;
    /* CIM_Message features */
    const KString OwningEntity;
    const KString MessageID;
    const KBoolean ContinuedInNextMessage;
    const KString Message;
    const KStringA MessageArguments;
}
CIM_Message;

static const unsigned char __CIM_Message_sig[] =
{
    0x0b,0x43,0x49,0x4d,0x5f,0x4d,0x65,0x73,0x73,0x61,0x67,0x65,0x00,0x05,0x0c,
    0x0c,0x4f,0x77,0x6e,0x69,0x6e,0x67,0x45,0x6e,0x74,0x69,0x74,0x79,0x00,0x0c,
    0x09,0x4d,0x65,0x73,0x73,0x61,0x67,0x65,0x49,0x44,0x00,0x00,0x16,0x43,0x6f,
    0x6e,0x74,0x69,0x6e,0x75,0x65,0x64,0x49,0x6e,0x4e,0x65,0x78,0x74,0x4d,0x65,
    0x73,0x73,0x61,0x67,0x65,0x00,0x0c,0x07,0x4d,0x65,0x73,0x73,0x61,0x67,0x65,
    0x00,0x8c,0x10,0x4d,0x65,0x73,0x73,0x61,0x67,0x65,0x41,0x72,0x67,0x75,0x6d,
    0x65,0x6e,0x74,0x73,0x00,
};

KINLINE void CIM_Message_Init(
    CIM_Message* self,
    const CMPIBroker* cb,
    const char* ns)
{
    const unsigned char* sig = __CIM_Message_sig;
    KBase_Init(&self->__base, cb, sizeof(*self), sig, ns);
}

KINLINE CMPIStatus CIM_Message_InitFromInstance(
    CIM_Message* self,
    const CMPIBroker* cb,
    const CMPIInstance* x)
{
    CIM_Message_Init(self, cb, NULL);
    return KBase_FromInstance(&self->__base, x);
}

KINLINE CMPIStatus CIM_Message_InitFromObjectPath(
    CIM_Message* self,
    const CMPIBroker* cb,
    const CMPIObjectPath* x)
{
    CIM_Message_Init(self, cb, NULL);
    return KBase_FromObjectPath(&self->__base, x);
}

KINLINE void CIM_Message_Print(
    const CIM_Message* self,
    FILE* os)
{
    KBase_Print(os, &self->__base, 'i');
}

KINLINE CMPIInstance* CIM_Message_ToInstance(
    const CIM_Message* self,
    CMPIStatus* status)
{
    return KBase_ToInstance(&self->__base, status);
}

KINLINE CMPIObjectPath* CIM_Message_ToObjectPath(
    const CIM_Message* self,
    CMPIStatus* status)
{
    return KBase_ToObjectPath(&self->__base, status);
}

KINLINE const char* CIM_Message_NameSpace(
    CIM_Message* self)
{
    if (self && self->__base.magic == KMAGIC)
        return self->__base.ns ? KChars(self->__base.ns) : NULL;
    return NULL;
}

KINLINE void CIM_Message_SetString_OwningEntity(
    CIM_Message* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OwningEntity;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_Message_Set_OwningEntity(
    CIM_Message* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OwningEntity;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_Message_Null_OwningEntity(
    CIM_Message* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OwningEntity;
        KString_Null(field);
    }
}

KINLINE void CIM_Message_Clr_OwningEntity(
    CIM_Message* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->OwningEntity;
        KString_Clr(field);
    }
}

KINLINE void CIM_Message_SetString_MessageID(
    CIM_Message* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->MessageID;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_Message_Set_MessageID(
    CIM_Message* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->MessageID;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_Message_Null_MessageID(
    CIM_Message* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->MessageID;
        KString_Null(field);
    }
}

KINLINE void CIM_Message_Clr_MessageID(
    CIM_Message* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->MessageID;
        KString_Clr(field);
    }
}

KINLINE void CIM_Message_Set_ContinuedInNextMessage(
    CIM_Message* self,
    CMPIBoolean x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KBoolean* field = (KBoolean*)&self->ContinuedInNextMessage;
        KBoolean_Set(field, x);
    }
}

KINLINE void CIM_Message_Null_ContinuedInNextMessage(
    CIM_Message* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KBoolean* field = (KBoolean*)&self->ContinuedInNextMessage;
        KBoolean_Null(field);
    }
}

KINLINE void CIM_Message_Clr_ContinuedInNextMessage(
    CIM_Message* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KBoolean* field = (KBoolean*)&self->ContinuedInNextMessage;
        KBoolean_Clr(field);
    }
}

KINLINE void CIM_Message_SetString_Message(
    CIM_Message* self,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Message;
        KString_SetString(field, x);
    }
}

KINLINE void CIM_Message_Set_Message(
    CIM_Message* self,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Message;
        KString_Set(field, self->__base.cb, s);
    }
}

KINLINE void CIM_Message_Null_Message(
    CIM_Message* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Message;
        KString_Null(field);
    }
}

KINLINE void CIM_Message_Clr_Message(
    CIM_Message* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KString* field = (KString*)&self->Message;
        KString_Clr(field);
    }
}

KINLINE CMPIBoolean CIM_Message_Init_MessageArguments(
    CIM_Message* self,
    CMPICount count)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->MessageArguments;
        return KStringA_Init(field, self->__base.cb, count);
    }
    return 0;
}

KINLINE void CIM_Message_InitNull_MessageArguments(
    CIM_Message* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->MessageArguments;
        KStringA_InitNull(field);
    }
}

KINLINE CMPIBoolean CIM_Message_SetString_MessageArguments(
    CIM_Message* self,
    CMPICount i,
    CMPIString* x)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->MessageArguments;
        return KStringA_SetString(field, i, x);
    }
    return 0;
}

KINLINE CMPIBoolean CIM_Message_Set_MessageArguments(
    CIM_Message* self,
    CMPICount i,
    const char* s)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->MessageArguments;
        return KStringA_Set(field, self->__base.cb, i, s);
    }
    return 0;
}

KINLINE KString CIM_Message_GetString_MessageArguments(
    CIM_Message* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->MessageArguments;
        return KStringA_GetString(field, i);
    }
    return KStringA_GetString(NULL, 0);
}

KINLINE const char* CIM_Message_Get_MessageArguments(
    CIM_Message* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->MessageArguments;
        return KStringA_Get(field, i);
    }
    return NULL;
}

KINLINE CMPIBoolean CIM_Message_Null_MessageArguments(
    CIM_Message* self,
    CMPICount i)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->MessageArguments;
        return KStringA_Null(field, i);
    }
    return 0;
}

KINLINE void CIM_Message_Clr_MessageArguments(
    CIM_Message* self)
{
    if (self && self->__base.magic == KMAGIC)
    {
        KStringA* field = (KStringA*)&self->MessageArguments;
        KStringA_Clr(field);
    }
}

/*
**==============================================================================
**
** CIM_Message methods
**
**==============================================================================
*/

KINLINE CMPIStatus CIM_Message_DispatchMethod(
    const CMPIBroker* cb,
    CMPIMethodMI* mi,
    const CMPIContext* cc,
    const CMPIResult* cr,
    const CMPIObjectPath* cop,
    const char* meth,
    const CMPIArgs* in,
    CMPIArgs* out)
{
    CIM_MessageRef self;

    KReturnIf(CIM_MessageRef_InitFromObjectPath(&self, cb, cop));


    KReturn(ERR_METHOD_NOT_FOUND);
}

#define CIM_Message_ClassName "CIM_Message"

#endif /* _konkrete_CIM_Message_h */
